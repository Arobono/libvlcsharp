<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VideoLAN.LibVLC</name>
    </assembly>
    <members>
        <member name="T:VideoLAN.LibVLC.LogLevel">
            <summary>Logging messages level.</summary>
            <remarks>Future LibVLC versions may define new levels.</remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.LogLevel.Debug">
            <summary>Debug message</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.LogLevel.Notice">
            <summary>Important informational message</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.LogLevel.Warning">
            <summary>Warning (potential error) message</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.LogLevel.Error">
            <summary>Error message</summary>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcCallbackT">
            <summary>This structure is opaque. It represents a libvlc instance</summary>
            <summary>
            <para>Event manager that belongs to a libvlc object, and from whom events can</para>
            <para>be received.</para>
            </summary>
            <summary>Type of a LibVLC event.</summary>
            <summary>Callback function notification</summary>
            <param name="p_event">the event triggering the callback</param>
        </member>
        <member name="M:VideoLAN.LibVLC.Instance.#ctor(System.Int32,System.SByte**)">
            <summary>
            <para>Create and initialize a libvlc instance.</para>
            <para>This functions accept a list of &quot;command line&quot; arguments similar to the</para>
            <para>main(). These arguments affect the LibVLC instance default configuration.</para>
            </summary>
            <param name="argc">the number of arguments (should be 0)</param>
            <param name="argv">list of arguments (should be NULL)</param>
            <returns>the libvlc instance or NULL in case of error</returns>
            <remarks>
            <para>LibVLC may create threads. Therefore, any thread-unsafe process</para>
            <para>initialization must be performed before calling libvlc_new(). In particular</para>
            <para>and where applicable:</para>
            <para>- setlocale() and textdomain(),</para>
            <para>- setenv(), unsetenv() and putenv(),</para>
            <para>- with the X11 display system, XInitThreads()</para>
            <para>(see also libvlc_media_player_set_xwindow()) and</para>
            <para>- on Microsoft Windows, SetErrorMode().</para>
            <para>- sigprocmask() shall never be invoked; pthread_sigmask() can be used.</para>
            <para>On POSIX systems, the SIGCHLD signalmust notbe ignored, i.e. the</para>
            <para>signal handler must set to SIG_DFL or a function pointer, not SIG_IGN.</para>
            <para>Also while LibVLC is active, the wait() function shall not be called, and</para>
            <para>any call to waitpid() shall use a strictly positive value for the first</para>
            <para>parameter (i.e. the PID). Failure to follow those rules may lead to a</para>
            <para>deadlock or a busy loop.</para>
            <para>Also on POSIX systems, it is recommended that the SIGPIPE signal be blocked,</para>
            <para>even if it is not, in principles, necessary, e.g.:</para>
            <para>On Microsoft Windows Vista/2008, the process error mode</para>
            <para>SEM_FAILCRITICALERRORS flagmustbe set before using LibVLC.</para>
            <para>On later versions, that is optional and unnecessary.</para>
            <para>Also on Microsoft Windows (Vista and any later version), setting the default</para>
            <para>DLL directories to SYSTEM32 exclusively is strongly recommended for</para>
            <para>security reasons:</para>
            <para>Arguments are meant to be passed from the command line to LibVLC, just like</para>
            <para>VLC media player does. The list of valid arguments depends on the LibVLC</para>
            <para>version, the operating system and platform, and set of available LibVLC</para>
            <para>plugins. Invalid or unsupported arguments will cause the function to fail</para>
            <para>(i.e. return NULL). Also, some arguments may alter the behaviour or</para>
            <para>otherwise interfere with other LibVLC functions.</para>
            <para>There is absolutely no warranty or promise of forward, backward and</para>
            <para>cross-platform compatibility with regards to libvlc_new() arguments.</para>
            <para>We recommend that you do not use them, other than when debugging.</para>
            </remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.ModuleDescription">
            <summary>Description of a module.</summary>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcErrmsg">
            <summary>
            <para>A human-readable error message for the last LibVLC error in the calling</para>
            <para>thread. The resulting string is valid until another error occurs (at least</para>
            <para>until the next LibVLC call).</para>
            </summary>
            <remarks>This will be NULL if there was no error.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcClearerr">
            <summary>
            <para>Clears the LibVLC error status for the current thread. This is optional.</para>
            <para>By default, the error status is automatically overridden when a new error</para>
            <para>occurs, and destroyed when the thread exits.</para>
            </summary>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcPrinterr(System.String)">
            <summary>
            <para>Sets the LibVLC error status and message for the current thread.</para>
            <para>Any previous error is overridden.</para>
            </summary>
            <param name="fmt">the format string</param>
            <param name="args">the arguments</param>
            <returns>a nul terminated string in any case</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcRelease(VideoLAN.LibVLC.Instance)">
            <summary>
            <para>Decrement the reference count of a libvlc instance, and destroy it</para>
            <para>if it reaches zero.</para>
            </summary>
            <param name="p_instance">the instance to destroy</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcRetain(VideoLAN.LibVLC.Instance)">
            <summary>
            <para>Increments the reference count of a libvlc instance.</para>
            <para>The initial reference count is 1 after libvlc_new() returns.</para>
            </summary>
            <param name="p_instance">the instance to reference</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcAddIntf(VideoLAN.LibVLC.Instance,System.String)">
            <summary>Try to start a user interface for the libvlc instance.</summary>
            <param name="p_instance">the instance</param>
            <param name="name">interface name, or NULL for default</param>
            <returns>0 on success, -1 on error.</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcSetExitHandler(VideoLAN.LibVLC.Instance,VideoLAN.LibVLC.Delegates.Action_IntPtr,System.IntPtr)">
            <summary>
            <para>Registers a callback for the LibVLC exit event. This is mostly useful if</para>
            <para>the VLC playlist and/or at least one interface are started with</para>
            <para>libvlc_playlist_play() or libvlc_add_intf() respectively.</para>
            <para>Typically, this function will wake up your application main loop (from</para>
            <para>another thread).</para>
            </summary>
            <param name="p_instance">LibVLC instance</param>
            <param name="cb">
            <para>callback to invoke when LibVLC wants to exit,</para>
            <para>or NULL to disable the exit handler (as by default)</para>
            </param>
            <param name="opaque">data pointer for the callback</param>
            <remarks>
            <para>This function should be called before the playlist or interface are</para>
            <para>started. Otherwise, there is a small race condition: the exit event could</para>
            <para>be raised before the handler is registered.</para>
            <para>This function and libvlc_wait() cannot be used at the same time.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcSetUserAgent(VideoLAN.LibVLC.Instance,System.String,System.String)">
            <summary>
            <para>Sets the application name. LibVLC passes this as the user agent string</para>
            <para>when a protocol requires it.</para>
            </summary>
            <param name="p_instance">LibVLC instance</param>
            <param name="name">human-readable application name, e.g. &quot;FooBar player 1.2.3&quot;</param>
            <param name="http">HTTP User Agent, e.g. &quot;FooBar/1.2.3 Python/2.6.0&quot;</param>
            <remarks>LibVLC 1.1.1 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcSetAppId(VideoLAN.LibVLC.Instance,System.String,System.String,System.String)">
            <summary>
            <para>Sets some meta-information about the application.</para>
            <para>See also libvlc_set_user_agent().</para>
            </summary>
            <param name="p_instance">LibVLC instance</param>
            <param name="id">Java-style application identifier, e.g. &quot;com.acme.foobar&quot;</param>
            <param name="version">application version numbers, e.g. &quot;1.2.3&quot;</param>
            <param name="icon">application icon name, e.g. &quot;foobar&quot;</param>
            <remarks>LibVLC 2.1.0 or later.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcGetVersion">
            <summary>Retrieve libvlc version.</summary>
            <returns>a string containing the libvlc version</returns>
            <remarks>Example: &quot;1.1.0-git The Luggage&quot;</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcGetCompiler">
            <summary>Retrieve libvlc compiler version.</summary>
            <returns>a string containing the libvlc compiler version</returns>
            <remarks>Example: &quot;gcc version 4.2.3 (Ubuntu 4.2.3-2ubuntu6)&quot;</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcGetChangeset">
            <summary>Retrieve libvlc changeset.</summary>
            <returns>a string containing the libvlc changeset</returns>
            <remarks>Example: &quot;aa9bce0bc4&quot;</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcFree(System.IntPtr)">
            <summary>
            <para>Frees an heap allocation returned by a LibVLC function.</para>
            <para>If you know you're using the same underlying C run-time as the LibVLC</para>
            <para>implementation, then you can call ANSI C free() directly instead.</para>
            </summary>
            <param name="ptr">the pointer</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcEventAttach(VideoLAN.LibVLC.EventManager,System.Int32,VideoLAN.LibVLC.LibvlcCallbackT,System.IntPtr)">
            <summary>Register for an event notification.</summary>
            <param name="p_event_manager">
            <para>the event manager to which you want to attach to.</para>
            <para>Generally it is obtained by vlc_my_object_event_manager() where</para>
            <para>my_object is the object you want to listen to.</para>
            </param>
            <param name="i_event_type">the desired event to which we want to listen</param>
            <param name="f_callback">the function to call when i_event_type occurs</param>
            <param name="user_data">user provided data to carry with the event</param>
            <returns>0 on success, ENOMEM on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcEventDetach(VideoLAN.LibVLC.EventManager,System.Int32,VideoLAN.LibVLC.LibvlcCallbackT,System.IntPtr)">
            <summary>Unregister an event notification.</summary>
            <param name="p_event_manager">the event manager</param>
            <param name="i_event_type">the desired event to which we want to unregister</param>
            <param name="f_callback">the function to call when i_event_type occurs</param>
            <param name="p_user_data">user provided data to carry with the event</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcEventTypeName(System.Int32)">
            <summary>Get an event's type name.</summary>
            <param name="event_type">the desired event</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcLogGetContext(VideoLAN.LibVLC.Log,System.SByte**,System.SByte**,System.UInt32@)">
            <summary>Gets log message debug infos.</summary>
            <param name="ctx">message context (as passed to the</param>
            <param name="module">module name storage (or NULL) [OUT]</param>
            <param name="file">source code file name storage (or NULL) [OUT]</param>
            <param name="line">source code file line number storage (or NULL) [OUT]</param>
            <remarks>
            <para>This function retrieves self-debug information about a log message:</para>
            <para>- the name of the VLC module emitting the message,</para>
            <para>- the name of the source code module (i.e. file) and</para>
            <para>- the line number within the source code module.</para>
            <para>The returned module name and file name will be NULL if unknown.</para>
            <para>The returned line number will similarly be zero if unknown.</para>
            <para>The returned module name and source code file name, if non-NULL,</para>
            <para>are only valid until the logging callback returns.</para>
            <para>LibVLC 2.1.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcLogGetObject(VideoLAN.LibVLC.Log,System.SByte**,System.SByte**,System.UInt64@)">
            <summary>Gets log message info.</summary>
            <param name="ctx">message context (as passed to the</param>
            <param name="name">object name storage (or NULL) [OUT]</param>
            <param name="header">object header (or NULL) [OUT]</param>
            <param name="line">source code file line number storage (or NULL) [OUT]</param>
            <remarks>
            <para>This function retrieves meta-information about a log message:</para>
            <para>- the type name of the VLC object emitting the message,</para>
            <para>- the object header if any, and</para>
            <para>- a temporaly-unique object identifier.</para>
            <para>This information is mainly meant formanualtroubleshooting.</para>
            <para>The returned type name may be &quot;generic&quot; if unknown, but it cannot be NULL.</para>
            <para>The returned header will be NULL if unset; in current versions, the header</para>
            <para>is used to distinguish for VLM inputs.</para>
            <para>The returned object ID will be zero if the message is not associated with</para>
            <para>any VLC object.</para>
            <para>The returned module name and source code file name, if non-NULL,</para>
            <para>are only valid until the logging callback returns.</para>
            <para>LibVLC 2.1.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcLogUnset(VideoLAN.LibVLC.Instance)">
            <summary>Unsets the logging callback.</summary>
            <param name="p_instance">libvlc instance</param>
            <remarks>
            <para>This function deregisters the logging callback for a LibVLC instance.</para>
            <para>This is rarely needed as the callback is implicitly unset when the instance</para>
            <para>is destroyed.</para>
            <para>This function will wait for any pending callbacks invocation to</para>
            <para>complete (causing a deadlock if called from within the callback).</para>
            <para>LibVLC 2.1.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcLogSetFile(VideoLAN.LibVLC.Instance,System.IntPtr)">
            <summary>Sets up logging to a file.</summary>
            <param name="p_instance">libvlc instance</param>
            <param name="stream">
            <para>FILE pointer opened for writing</para>
            <para>(the FILE pointer must remain valid until libvlc_log_unset())</para>
            </param>
            <remarks>LibVLC 2.1.0 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcModuleDescriptionListRelease(VideoLAN.LibVLC.ModuleDescription)">
            <summary>Release a list of module descriptions.</summary>
            <param name="p_list">the list to be released</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcAudioFilterListGet(VideoLAN.LibVLC.Instance)">
            <summary>Returns a list of audio filters that are available.</summary>
            <param name="p_instance">libvlc instance</param>
            <returns>
            <para>a list of module descriptions. It should be freed with libvlc_module_description_list_release().</para>
            <para>In case of an error, NULL is returned.</para>
            </returns>
            <remarks>
            <para>libvlc_module_description_t</para>
            <para>libvlc_module_description_list_release</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcVideoFilterListGet(VideoLAN.LibVLC.Instance)">
            <summary>Returns a list of video filters that are available.</summary>
            <param name="p_instance">libvlc instance</param>
            <returns>
            <para>a list of module descriptions. It should be freed with libvlc_module_description_list_release().</para>
            <para>In case of an error, NULL is returned.</para>
            </returns>
            <remarks>
            <para>libvlc_module_description_t</para>
            <para>libvlc_module_description_list_release</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcClock">
            <summary>
            <para>Return the current time as defined by LibVLC. The unit is the microsecond.</para>
            <para>Time increases monotonically (regardless of time zone changes and RTC</para>
            <para>adjustements).</para>
            <para>The origin is arbitrary but consistent across the whole system</para>
            <para>(e.g. the system uptim, the time since the system was booted).</para>
            </summary>
            <remarks>On systems that support it, the POSIX monotonic clock is used.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc.LibvlcDelay(System.Int64)">
            <summary>Return the delay (in microseconds) until a certain timestamp.</summary>
            <param name="pts">timestamp</param>
            <returns>
            <para>negative if timestamp is in the past,</para>
            <para>positive if it is in the future</para>
            </returns>
        </member>
        <member name="T:VideoLAN.LibVLC.RendererItem">
            <summary>
            <para>LibVLC renderer discoverer finds available renderers available on the local</para>
            <para>network</para>
            <para>@{</para>
            <para></para>
            <para>LibVLC renderer discoverer external API</para>
            </summary>
            <summary>Renderer item</summary>
            <remarks>
            <para>This struct is passed by a</para>
            <para>or deleted.</para>
            <para>An item is valid until the</para>
            <para>is called with the same pointer.</para>
            <para>libvlc_renderer_discoverer_event_manager()</para>
            </remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.RendererDiscovererDescription">
            <summary>Renderer discoverer description</summary>
            <remarks>libvlc_renderer_discoverer_list_get()</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_renderer_discoverer.LibvlcRendererItemName(VideoLAN.LibVLC.RendererItem)">
            <summary>Get the human readable name of a renderer item</summary>
            <returns>the name of the item (can't be NULL, must *not* be freed)</returns>
            <remarks>LibVLC 3.0.0 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_renderer_discoverer.LibvlcRendererItemType(VideoLAN.LibVLC.RendererItem)">
            <summary>
            <para>Get the type (not translated) of a renderer item. For now, the type can only</para>
            <para>be &quot;chromecast&quot; (&quot;upnp&quot;, &quot;airplay&quot; may come later).</para>
            </summary>
            <returns>the type of the item (can't be NULL, must *not* be freed)</returns>
            <remarks>LibVLC 3.0.0 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_renderer_discoverer.LibvlcRendererItemIconUri(VideoLAN.LibVLC.RendererItem)">
            <summary>Get the icon uri of a renderer item</summary>
            <returns>the uri of the item's icon (can be NULL, must *not* be freed)</returns>
            <remarks>LibVLC 3.0.0 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_renderer_discoverer.LibvlcRendererItemFlags(VideoLAN.LibVLC.RendererItem)">
            <summary>Get the flags of a renderer item</summary>
            <returns>bitwise flag: capabilities of the renderer, see</returns>
            <remarks>
            <para>LIBVLC_RENDERER_CAN_AUDIO</para>
            <para>LIBVLC_RENDERER_CAN_VIDEO</para>
            <para>LibVLC 3.0.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_renderer_discoverer.LibvlcRendererDiscovererNew(VideoLAN.LibVLC.Instance,System.String)">
            <summary>Create a renderer discoverer object by name</summary>
            <param name="p_inst">libvlc instance</param>
            <param name="psz_name">
            <para>service name; use libvlc_renderer_discoverer_list_get() to</para>
            <para>get a list of the discoverer names available in this libVLC instance</para>
            </param>
            <returns>media discover object or NULL in case of error</returns>
            <remarks>
            <para>After this object is created, you should attach to events in order to be</para>
            <para>notified of the discoverer events.</para>
            <para>You need to call libvlc_renderer_discoverer_start() in order to start the</para>
            <para>discovery.</para>
            <para>libvlc_renderer_discoverer_event_manager()</para>
            <para>libvlc_renderer_discoverer_start()</para>
            <para>LibVLC 3.0.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_renderer_discoverer.LibvlcRendererDiscovererRelease(VideoLAN.LibVLC.RendererDiscoverer)">
            <summary>Release a renderer discoverer object</summary>
            <param name="p_rd">renderer discoverer object</param>
            <remarks>LibVLC 3.0.0 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_renderer_discoverer.LibvlcRendererDiscovererStart(VideoLAN.LibVLC.RendererDiscoverer)">
            <summary>Start renderer discovery</summary>
            <param name="p_rd">renderer discoverer object</param>
            <returns>-1 in case of error, 0 otherwise</returns>
            <remarks>
            <para>To stop it, call libvlc_renderer_discoverer_stop() or</para>
            <para>libvlc_renderer_discoverer_release() directly.</para>
            <para>libvlc_renderer_discoverer_stop()</para>
            <para>LibVLC 3.0.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_renderer_discoverer.LibvlcRendererDiscovererStop(VideoLAN.LibVLC.RendererDiscoverer)">
            <summary>Stop renderer discovery.</summary>
            <param name="p_rd">renderer discoverer object</param>
            <remarks>
            <para>libvlc_renderer_discoverer_start()</para>
            <para>LibVLC 3.0.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_renderer_discoverer.LibvlcRendererDiscovererEventManager(VideoLAN.LibVLC.RendererDiscoverer)">
            <summary>Get the event manager of the renderer discoverer</summary>
            <returns>a valid event manager (can't fail)</returns>
            <remarks>
            <para>The possible events to attach are</para>
            <para>and</para>
            <para>The</para>
            <para>VLC, users should take care of copying this struct for their internal usage.</para>
            <para>libvlc_event_t.u.renderer_discoverer_item_added.item</para>
            <para>libvlc_event_t.u.renderer_discoverer_item_removed.item</para>
            <para>LibVLC 3.0.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_renderer_discoverer.LibvlcRendererDiscovererListGet(VideoLAN.LibVLC.Instance,VideoLAN.LibVLC.RendererDiscovererDescription)">
            <summary>Get media discoverer services</summary>
            <param name="p_inst">libvlc instance</param>
            <param name="ppp_services">
            <para>address to store an allocated array of renderer</para>
            <para>discoverer services (must be freed with libvlc_renderer_list_release() by</para>
            <para>the caller) [OUT]</para>
            </param>
            <returns>the number of media discoverer services (0 on error)</returns>
            <remarks>
            <para>libvlc_renderer_list_release()</para>
            <para>LibVLC 3.0.0 and later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_renderer_discoverer.LibvlcRendererDiscovererListRelease(VideoLAN.LibVLC.RendererDiscovererDescription,System.UInt64)">
            <summary>Release an array of media discoverer services</summary>
            <param name="pp_services">array to release</param>
            <param name="i_count">number of elements in the array</param>
            <remarks>
            <para>libvlc_renderer_discoverer_list_get()</para>
            <para>LibVLC 3.0.0 and later</para>
            </remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.MetadataType">
            <summary>Meta data types</summary>
        </member>
        <member name="T:VideoLAN.LibVLC.VLCState">
            <summary>Note the order of libvlc_state_t enum must match exactly the order of</summary>
            <remarks>
            <para>mediacontrol_PlayerStatus,</para>
            <para>input_state_e enums,</para>
            <para>and VideoLAN.LibVLC.State (at bindings/cil/src/media.cs).</para>
            <para>Expected states by web plugins are:</para>
            <para>IDLE/CLOSE=0, OPENING=1, PLAYING=3, PAUSED=4,</para>
            <para>STOPPING=5, ENDED=6, ERROR=7</para>
            </remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.VideoOrientation.TopLeft">
            <summary>Normal. Top line represents top, left column left.</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.VideoOrientation.TopRight">
            <summary>Flipped horizontally</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.VideoOrientation.BottomLeft">
            <summary>Flipped vertically</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.VideoOrientation.BottomRight">
            <summary>Rotated 180 degrees</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.VideoOrientation.LeftTop">
            <summary>Transposed</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.VideoOrientation.LeftBottom">
            <summary>Rotated 90 degrees clockwise (or 270 anti-clockwise)</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.VideoOrientation.RightTop">
            <summary>Rotated 90 degrees anti-clockwise</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.VideoOrientation.RightBottom">
            <summary>Anti-transposed</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.VideoProjection.Equirectangular">
            <summary>360 spherical</summary>
        </member>
        <member name="T:VideoLAN.LibVLC.MediaType">
            <summary>Media type</summary>
            <remarks>libvlc_media_get_type</remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.MediaParseOptions">
            <summary>Parse flags used by libvlc_media_parse_with_options()</summary>
            <remarks>libvlc_media_parse_with_options</remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.MediaParseOptions.ParseLocal">
            <summary>Parse media if it's a local file</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.MediaParseOptions.ParseNetwork">
            <summary>Parse media even if it's a network file</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.MediaParseOptions.FetchLocal">
            <summary>Fetch meta and covert art using local resources</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.MediaParseOptions.FetchNetwork">
            <summary>Fetch meta and covert art using network resources</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.MediaParseOptions.DoInteract">
            <summary>
            <para>Interact with the user (via libvlc_dialog_cbs) when preparsing this item</para>
            <para>(and not its sub items). Set this flag in order to receive a callback</para>
            <para>when the input is asking for credentials.</para>
            </summary>
        </member>
        <member name="T:VideoLAN.LibVLC.MediaParsedStatus">
            <summary>
            <para>Parse status used sent by libvlc_media_parse_with_options() or returned by</para>
            <para>libvlc_media_get_parsed_status()</para>
            </summary>
            <remarks>
            <para>libvlc_media_parse_with_options</para>
            <para>libvlc_media_get_parsed_status</para>
            </remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.MediaSlaveType">
            <summary>Type of a media slave: subtitle or audio.</summary>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcMediaOpenCb">
            <summary>
            <para>It consists of a media location and various optional meta data.</para>
            <para>@{</para>
            <para></para>
            <para>LibVLC media item/descriptor external API</para>
            </summary>
            <summary>Callback prototype to open a custom bitstream input media.</summary>
            <param name="opaque">private pointer as passed to libvlc_media_new_callbacks()</param>
            <param name="datap">storage space for a private data pointer [OUT]</param>
            <param name="sizep">byte length of the bitstream or UINT64_MAX if unknown [OUT]</param>
            <returns>
            <para>0 on success, non-zero on error. In case of failure, the other</para>
            <para>callbacks will not be invoked and any value stored in *datap and *sizep is</para>
            <para>discarded.</para>
            </returns>
            <remarks>
            <para>The same media item can be opened multiple times. Each time, this callback</para>
            <para>is invoked. It should allocate and initialize any instance-specific</para>
            <para>resources, then store them in *datap. The instance resources can be freed</para>
            <para>in the</para>
            <para>For convenience, *datap is initially NULL and *sizep is initially 0.</para>
            </remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcMediaReadCb">
            <summary>Callback prototype to read data from a custom bitstream input media.</summary>
            <param name="opaque">private pointer as set by the</param>
            <param name="buf">start address of the buffer to read data into</param>
            <param name="len">bytes length of the buffer</param>
            <returns>
            <para>strictly positive number of bytes read, 0 on end-of-stream,</para>
            <para>or -1 on non-recoverable error</para>
            </returns>
            <remarks>
            <para>callback</para>
            <para>If no data is immediately available, then the callback should sleep.</para>
            <para>The application is responsible for avoiding deadlock situations.</para>
            <para>In particular, the callback should return an error if playback is stopped;</para>
            <para>if it does not return, then libvlc_media_player_stop() will never return.</para>
            </remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcMediaSeekCb">
            <summary>Callback prototype to seek a custom bitstream input media.</summary>
            <param name="opaque">private pointer as set by the</param>
            <param name="offset">absolute byte offset to seek to</param>
            <returns>0 on success, -1 on error.</returns>
            <remarks>callback</remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcMediaCloseCb">
            <summary>Callback prototype to close a custom bitstream input media.</summary>
            <param name="opaque">private pointer as set by the</param>
            <remarks>callback</remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.MediaSlave">
            <summary>A slave of a libvlc_media_t</summary>
            <remarks>libvlc_media_slaves_get</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaNewLocation(VideoLAN.LibVLC.Instance,System.String)">
            <summary>
            <para>Create a media with a certain given media resource location,</para>
            <para>for instance a valid URL.</para>
            </summary>
            <param name="p_instance">the instance</param>
            <param name="psz_mrl">the media location</param>
            <returns>the newly created media or NULL on error</returns>
            <remarks>
            <para>To refer to a local file with this function,</para>
            <para>the file://... URI syntaxmustbe used (see IETF RFC3986).</para>
            <para>We recommend using libvlc_media_new_path() instead when dealing with</para>
            <para>local files.</para>
            <para>libvlc_media_release</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaNewPath(VideoLAN.LibVLC.Instance,System.String)">
            <summary>Create a media for a certain file path.</summary>
            <param name="p_instance">the instance</param>
            <param name="path">local filesystem path</param>
            <returns>the newly created media or NULL on error</returns>
            <remarks>libvlc_media_release</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaNewFd(VideoLAN.LibVLC.Instance,System.Int32)">
            <summary>
            <para>Create a media for an already open file descriptor.</para>
            <para>The file descriptor shall be open for reading (or reading and writing).</para>
            </summary>
            <param name="p_instance">the instance</param>
            <param name="fd">open file descriptor</param>
            <returns>the newly created media or NULL on error</returns>
            <remarks>
            <para>Regular file descriptors, pipe read descriptors and character device</para>
            <para>descriptors (including TTYs) are supported on all platforms.</para>
            <para>Block device descriptors are supported where available.</para>
            <para>Directory descriptors are supported on systems that provide fdopendir().</para>
            <para>Sockets are supported on all platforms where they are file descriptors,</para>
            <para>i.e. all except Windows.</para>
            <para>This library willnotautomatically close the file descriptor</para>
            <para>under any circumstance. Nevertheless, a file descriptor can usually only be</para>
            <para>rendered once in a media player. To render it a second time, the file</para>
            <para>descriptor should probably be rewound to the beginning with lseek().</para>
            <para>libvlc_media_release</para>
            <para>LibVLC 1.1.5 and later.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaNewCallbacks(VideoLAN.LibVLC.Instance,VideoLAN.LibVLC.LibvlcMediaOpenCb,VideoLAN.LibVLC.LibvlcMediaReadCb,VideoLAN.LibVLC.LibvlcMediaSeekCb,VideoLAN.LibVLC.LibvlcMediaCloseCb,System.IntPtr)">
            <summary>Create a media with custom callbacks to read the data from.</summary>
            <param name="instance">LibVLC instance</param>
            <param name="open_cb">callback to open the custom bitstream input media</param>
            <param name="read_cb">callback to read data (must not be NULL)</param>
            <param name="seek_cb">callback to seek, or NULL if seeking is not supported</param>
            <param name="close_cb">callback to close the media, or NULL if unnecessary</param>
            <param name="opaque">data pointer for the open callback</param>
            <returns>the newly created media or NULL on error</returns>
            <remarks>
            <para>If open_cb is NULL, the opaque pointer will be passed to read_cb,</para>
            <para>seek_cb and close_cb, and the stream size will be treated as unknown.</para>
            <para>The callbacks may be called asynchronously (from another thread).</para>
            <para>A single stream instance need not be reentrant. However the open_cb needs to</para>
            <para>be reentrant if the media is used by multiple player instances.</para>
            <para>The callbacks may be used until all or any player instances</para>
            <para>that were supplied the media item are stopped.</para>
            <para>libvlc_media_release</para>
            <para>LibVLC 3.0.0 and later.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaNewAsNode(VideoLAN.LibVLC.Instance,System.String)">
            <summary>Create a media as an empty node with a given name.</summary>
            <param name="p_instance">the instance</param>
            <param name="psz_name">the name of the node</param>
            <returns>the new empty media or NULL on error</returns>
            <remarks>libvlc_media_release</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaAddOption(VideoLAN.LibVLC.Media,System.String)">
            <summary>Add an option to the media.</summary>
            <param name="p_md">the media descriptor</param>
            <param name="psz_options">the options (as a string)</param>
            <remarks>
            <para>This option will be used to determine how the media_player will</para>
            <para>read the media. This allows to use VLC's advanced</para>
            <para>reading/streaming options on a per-media basis.</para>
            <para>The options are listed in 'vlc --long-help' from the command line,</para>
            <para>e.g. &quot;-sout-all&quot;. Keep in mind that available options and their semantics</para>
            <para>vary across LibVLC versions and builds.</para>
            <para>Not all options affects libvlc_media_t objects:</para>
            <para>Specifically, due to architectural issues most audio and video options,</para>
            <para>such as text renderer options, have no effects on an individual media.</para>
            <para>These options must be set through libvlc_new() instead.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaAddOptionFlag(VideoLAN.LibVLC.Media,System.String,System.UInt32)">
            <summary>Add an option to the media with configurable flags.</summary>
            <param name="p_md">the media descriptor</param>
            <param name="psz_options">the options (as a string)</param>
            <param name="i_flags">the flags for this option</param>
            <remarks>
            <para>This option will be used to determine how the media_player will</para>
            <para>read the media. This allows to use VLC's advanced</para>
            <para>reading/streaming options on a per-media basis.</para>
            <para>The options are detailed in vlc --long-help, for instance</para>
            <para>&quot;--sout-all&quot;. Note that all options are not usable on medias:</para>
            <para>specifically, due to architectural issues, video-related options</para>
            <para>such as text renderer options cannot be set on a single media. They</para>
            <para>must be set on the whole libvlc instance instead.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaRetain(VideoLAN.LibVLC.Media)">
            <summary>
            <para>Retain a reference to a media descriptor object (libvlc_media_t). Use</para>
            <para>libvlc_media_release() to decrement the reference count of a</para>
            <para>media descriptor object.</para>
            </summary>
            <param name="p_md">the media descriptor</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaRelease(VideoLAN.LibVLC.Media)">
            <summary>
            <para>Decrement the reference count of a media descriptor object. If the</para>
            <para>reference count is 0, then libvlc_media_release() will release the</para>
            <para>media descriptor object. It will send out an libvlc_MediaFreed event</para>
            <para>to all listeners. If the media descriptor object has been released it</para>
            <para>should not be used again.</para>
            </summary>
            <param name="p_md">the media descriptor</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaGetMrl(VideoLAN.LibVLC.Media)">
            <summary>Get the media resource locator (mrl) from a media descriptor object</summary>
            <param name="p_md">a media descriptor object</param>
            <returns>string with mrl of media descriptor object</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaDuplicate(VideoLAN.LibVLC.Media)">
            <summary>Duplicate a media descriptor object.</summary>
            <param name="p_md">a media descriptor object.</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaGetMeta(VideoLAN.LibVLC.Media,VideoLAN.LibVLC.MetadataType)">
            <summary>Read the meta of the media.</summary>
            <param name="p_md">the media descriptor</param>
            <param name="e_meta">the meta to read</param>
            <returns>the media's meta</returns>
            <remarks>
            <para>If the media has not yet been parsed this will return NULL.</para>
            <para>libvlc_media_parse</para>
            <para>libvlc_media_parse_with_options</para>
            <para>libvlc_MediaMetaChanged</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaSetMeta(VideoLAN.LibVLC.Media,VideoLAN.LibVLC.MetadataType,System.String)">
            <summary>
            <para>Set the meta of the media (this function will not save the meta, call</para>
            <para>libvlc_media_save_meta in order to save the meta)</para>
            </summary>
            <param name="p_md">the media descriptor</param>
            <param name="e_meta">the meta to write</param>
            <param name="psz_value">the media's meta</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaSaveMeta(VideoLAN.LibVLC.Media)">
            <summary>Save the meta previously set</summary>
            <param name="p_md">the media desriptor</param>
            <returns>true if the write operation was successful</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaGetState(VideoLAN.LibVLC.Media)">
            <summary>
            <para>Get current state of media descriptor object. Possible media states are</para>
            <para>libvlc_NothingSpecial=0, libvlc_Opening, libvlc_Playing, libvlc_Paused,</para>
            <para>libvlc_Stopped, libvlc_Ended, libvlc_Error.</para>
            </summary>
            <param name="p_md">a media descriptor object</param>
            <returns>state of media descriptor object</returns>
            <remarks>libvlc_state_t</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaGetStats(VideoLAN.LibVLC.Media,VideoLAN.LibVLC.MediaStats)">
            <summary>Get the current statistics about the media</summary>
            <param name="p_md:">media descriptor object</param>
            <param name="p_stats:">
            <para>structure that contain the statistics about the media</para>
            <para>(this structure must be allocated by the caller)</para>
            </param>
            <returns>true if the statistics are available, false otherwise</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaSubitems(VideoLAN.LibVLC.Media)">
            <summary>
            <para>Get subitems of media descriptor object. This will increment</para>
            <para>the reference count of supplied media descriptor object. Use</para>
            <para>libvlc_media_list_release() to decrement the reference counting.</para>
            </summary>
            <param name="p_md">media descriptor object</param>
            <returns>list of media descriptor subitems or NULL</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaEventManager(VideoLAN.LibVLC.Media)">
            <summary>
            <para>Get event manager from media descriptor object.</para>
            <para>NOTE: this function doesn't increment reference counting.</para>
            </summary>
            <param name="p_md">a media descriptor object</param>
            <returns>event manager object</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaGetDuration(VideoLAN.LibVLC.Media)">
            <summary>Get duration (in ms) of media descriptor object item.</summary>
            <param name="p_md">media descriptor object</param>
            <returns>duration of media item or -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaParseWithOptions(VideoLAN.LibVLC.Media,VideoLAN.LibVLC.MediaParseOptions,System.Int32)">
            <summary>Parse the media asynchronously with options.</summary>
            <param name="p_md">media descriptor object</param>
            <param name="parse_flag">parse options:</param>
            <param name="timeout">
            <para>maximum time allowed to preparse the media. If -1, the</para>
            <para>default &quot;preparse-timeout&quot; option will be used as a timeout. If 0, it will</para>
            <para>wait indefinitely. If &gt; 0, the timeout will be used (in milliseconds).</para>
            </param>
            <returns>-1 in case of error, 0 otherwise</returns>
            <remarks>
            <para>This fetches (local or network) art, meta data and/or tracks information.</para>
            <para>This method is the extended version of libvlc_media_parse_with_options().</para>
            <para>To track when this is over you can listen to libvlc_MediaParsedChanged</para>
            <para>event. However if this functions returns an error, you will not receive any</para>
            <para>events.</para>
            <para>It uses a flag to specify parse options (see libvlc_media_parse_flag_t). All</para>
            <para>these flags can be combined. By default, media is parsed if it's a local</para>
            <para>file.</para>
            <para>Parsing can be aborted with libvlc_media_parse_stop().</para>
            <para>libvlc_MediaParsedChanged</para>
            <para>libvlc_media_get_meta</para>
            <para>libvlc_media_tracks_get</para>
            <para>libvlc_media_get_parsed_status</para>
            <para>libvlc_media_parse_flag_t</para>
            <para>LibVLC 3.0.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaParseStop(VideoLAN.LibVLC.Media)">
            <summary>Stop the parsing of the media</summary>
            <param name="p_md">media descriptor object</param>
            <remarks>
            <para>When the media parsing is stopped, the libvlc_MediaParsedChanged event will</para>
            <para>be sent with the libvlc_media_parsed_status_timeout status.</para>
            <para>libvlc_media_parse_with_options</para>
            <para>LibVLC 3.0.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaGetParsedStatus(VideoLAN.LibVLC.Media)">
            <summary>Get Parsed status for media descriptor object.</summary>
            <param name="p_md">media descriptor object</param>
            <returns>a value of the libvlc_media_parsed_status_t enum</returns>
            <remarks>
            <para>libvlc_MediaParsedChanged</para>
            <para>libvlc_media_parsed_status_t</para>
            <para>LibVLC 3.0.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaSetUserData(VideoLAN.LibVLC.Media,System.IntPtr)">
            <summary>
            <para>Sets media descriptor's user_data. user_data is specialized data</para>
            <para>accessed by the host application, VLC.framework uses it as a pointer to</para>
            <para>an native object that references a libvlc_media_t pointer</para>
            </summary>
            <param name="p_md">media descriptor object</param>
            <param name="p_new_user_data">pointer to user data</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaGetUserData(VideoLAN.LibVLC.Media)">
            <summary>
            <para>Get media descriptor's user_data. user_data is specialized data</para>
            <para>accessed by the host application, VLC.framework uses it as a pointer to</para>
            <para>an native object that references a libvlc_media_t pointer</para>
            </summary>
            <param name="p_md">media descriptor object</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaTracksGet(VideoLAN.LibVLC.Media,VideoLAN.LibVLC.MediaTrack)">
            <summary>Get media descriptor's elementary streams description</summary>
            <param name="p_md">media descriptor object</param>
            <param name="tracks">
            <para>address to store an allocated array of Elementary Streams</para>
            <para>descriptions (must be freed with libvlc_media_tracks_release</para>
            <para>by the caller) [OUT]</para>
            </param>
            <returns>the number of Elementary Streams (zero on error)</returns>
            <remarks>
            <para>Note, you need to call libvlc_media_parse() or play the media at least once</para>
            <para>before calling this function.</para>
            <para>Not doing this will result in an empty array.</para>
            <para>LibVLC 2.1.0 and later.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaGetCodecDescription(VideoLAN.LibVLC.TrackType,System.UInt32)">
            <summary>Get codec description from media elementary stream</summary>
            <param name="i_type">i_type from libvlc_media_track_t</param>
            <param name="i_codec">i_codec or i_original_fourcc from libvlc_media_track_t</param>
            <returns>codec description</returns>
            <remarks>
            <para>LibVLC 3.0.0 and later.</para>
            <para>libvlc_media_track_t</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaTracksRelease(VideoLAN.LibVLC.MediaTrack,System.UInt32)">
            <summary>Release media descriptor's elementary streams description array</summary>
            <param name="p_tracks">tracks info array to release</param>
            <param name="i_count">number of elements in the array</param>
            <remarks>LibVLC 2.1.0 and later.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaGetType(VideoLAN.LibVLC.Media)">
            <summary>Get the media type of the media descriptor object</summary>
            <param name="p_md">media descriptor object</param>
            <returns>media type</returns>
            <remarks>
            <para>LibVLC 3.0.0 and later.</para>
            <para>libvlc_media_type_t</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaSlavesAdd(VideoLAN.LibVLC.Media,VideoLAN.LibVLC.MediaSlaveType,System.UInt32,System.String)">
            <summary>Add a slave to the current media.</summary>
            <param name="p_md">media descriptor object</param>
            <param name="i_type">subtitle or audio</param>
            <param name="i_priority">from 0 (low priority) to 4 (high priority)</param>
            <param name="psz_uri">Uri of the slave (should contain a valid scheme).</param>
            <returns>0 on success, -1 on error.</returns>
            <remarks>
            <para>A slave is an external input source that may contains an additional subtitle</para>
            <para>track (like a .srt) or an additional audio track (like a .ac3).</para>
            <para>This function must be called before the media is parsed (via</para>
            <para>libvlc_media_parse_with_options()) or before the media is played (via</para>
            <para>libvlc_media_player_play())</para>
            <para>LibVLC 3.0.0 and later.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaSlavesClear(VideoLAN.LibVLC.Media)">
            <summary>
            <para>Clear all slaves previously added by libvlc_media_slaves_add() or</para>
            <para>internally.</para>
            </summary>
            <param name="p_md">media descriptor object</param>
            <remarks>LibVLC 3.0.0 and later.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaSlavesGet(VideoLAN.LibVLC.Media,VideoLAN.LibVLC.MediaSlave)">
            <summary>Get a media descriptor's slave list</summary>
            <param name="p_md">media descriptor object</param>
            <param name="ppp_slaves">
            <para>address to store an allocated array of slaves (must be</para>
            <para>freed with libvlc_media_slaves_release()) [OUT]</para>
            </param>
            <returns>the number of slaves (zero on error)</returns>
            <remarks>
            <para>The list will contain slaves parsed by VLC or previously added by</para>
            <para>libvlc_media_slaves_add(). The typical use case of this function is to save</para>
            <para>a list of slave in a database for a later use.</para>
            <para>LibVLC 3.0.0 and later.</para>
            <para>libvlc_media_slaves_add</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media.LibvlcMediaSlavesRelease(VideoLAN.LibVLC.MediaSlave,System.UInt32)">
            <summary>Release a media descriptor's slave list</summary>
            <param name="pp_slaves">slave array to release</param>
            <param name="i_count">number of elements in the array</param>
            <remarks>LibVLC 3.0.0 and later.</remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.Title">
            <summary>Description for titles</summary>
        </member>
        <member name="T:VideoLAN.LibVLC.VideoMarqueeOption">
            <summary>Marq options definition</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.VideoMarqueeOption.Color">
            <summary>string argument</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.VideoMarqueeOption.Opacity">
            <summary>string argument</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.VideoMarqueeOption.Position">
            <summary>string argument</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.VideoMarqueeOption.Refresh">
            <summary>string argument</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.VideoMarqueeOption.Size">
            <summary>string argument</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.VideoMarqueeOption.Timeout">
            <summary>string argument</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.VideoMarqueeOption.X">
            <summary>string argument</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.VideoMarqueeOption.Y">
            <summary>string argument</summary>
        </member>
        <member name="T:VideoLAN.LibVLC.NavigationMode">
            <summary>Navigation mode</summary>
        </member>
        <member name="T:VideoLAN.LibVLC.Position">
            <summary>Enumeration of values used to set position (e.g. of video title).</summary>
        </member>
        <member name="T:VideoLAN.LibVLC.TeletextKey">
            <summary>
            <para>Enumeration of teletext keys than can be passed via</para>
            <para>libvlc_video_set_teletext()</para>
            </summary>
        </member>
        <member name="T:VideoLAN.LibVLC.VideoLogoOption">
            <summary>option values for libvlc_video_{get,set}_logo_{int,string}</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.VideoLogoOption.File">
            <summary>string argument, &quot;file,d,t;file,d,t;...&quot;</summary>
        </member>
        <member name="T:VideoLAN.LibVLC.VideoAdjustOption">
            <summary>option values for libvlc_video_{get,set}_adjust_{int,float,bool}</summary>
        </member>
        <member name="T:VideoLAN.LibVLC.AudioOutputDeviceType">
            <summary>Audio device types</summary>
        </member>
        <member name="T:VideoLAN.LibVLC.AudioOutputChannel">
            <summary>Audio channels</summary>
        </member>
        <member name="T:VideoLAN.LibVLC.MediaPlayerRole">
            <summary>Media player roles.</summary>
            <remarks>
            <para>LibVLC 3.0.0 and later.</para>
            <para>See</para>
            </remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.MediaPlayerRole.None">
            <summary>Don't use a media player role</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.MediaPlayerRole.Music">
            <summary>Music (or radio) playback</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.MediaPlayerRole.Video">
            <summary>Video playback</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.MediaPlayerRole.Communication">
            <summary>Speech, real-time communication</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.MediaPlayerRole.Game">
            <summary>Video game</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.MediaPlayerRole.LiblvcRoleNotification">
            <summary>User interaction feedback</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.MediaPlayerRole.Animation">
            <summary>Embedded animation (e.g. in web page)</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.MediaPlayerRole.Production">
            <summary>Audio editting/production</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.MediaPlayerRole.Accessibility">
            <summary>Accessibility</summary>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcVideoLockCb">
            <summary>
            <para>A LibVLC media player plays one media (usually in a custom drawable).</para>
            <para>@{</para>
            <para></para>
            <para>LibVLC simple media player external API</para>
            </summary>
            <summary>Opaque equalizer handle.</summary>
            <remarks>Equalizer settings can be applied to a media player.</remarks>
            <summary>Callback prototype to allocate and lock a picture buffer.</summary>
            <param name="opaque">private pointer as passed to libvlc_video_set_callbacks() [IN]</param>
            <param name="planes">
            <para>start address of the pixel planes (LibVLC allocates the array</para>
            <para>of void pointers, this callback must initialize the array) [OUT]</para>
            </param>
            <returns>
            <para>a private pointer for the display and unlock callbacks to identify</para>
            <para>the picture buffers</para>
            </returns>
            <remarks>
            <para>Whenever a new video frame needs to be decoded, the lock callback is</para>
            <para>invoked. Depending on the video chroma, one or three pixel planes of</para>
            <para>adequate dimensions must be returned via the second parameter. Those</para>
            <para>planes must be aligned on 32-bytes boundaries.</para>
            </remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcVideoUnlockCb">
            <summary>Callback prototype to unlock a picture buffer.</summary>
            <param name="opaque">private pointer as passed to libvlc_video_set_callbacks() [IN]</param>
            <param name="picture">private pointer returned from the</param>
            <param name="planes">pixel planes as defined by the</param>
            <remarks>
            <para>When the video frame decoding is complete, the unlock callback is invoked.</para>
            <para>This callback might not be needed at all. It is only an indication that the</para>
            <para>application can now read the pixel values if it needs to.</para>
            <para>A picture buffer is unlocked after the picture is decoded,</para>
            <para>but before the picture is displayed.</para>
            <para>callback [IN]</para>
            <para>callback (this parameter is only for convenience) [IN]</para>
            </remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcVideoDisplayCb">
            <summary>Callback prototype to display a picture.</summary>
            <param name="opaque">private pointer as passed to libvlc_video_set_callbacks() [IN]</param>
            <param name="picture">private pointer returned from the</param>
            <remarks>
            <para>When the video frame needs to be shown, as determined by the media playback</para>
            <para>clock, the display callback is invoked.</para>
            <para>callback [IN]</para>
            </remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcVideoFormatCb">
            <summary>
            <para>Callback prototype to configure picture buffers format.</para>
            <para>This callback gets the format of the video as output by the video decoder</para>
            <para>and the chain of video filters (if any). It can opt to change any parameter</para>
            <para>as it needs. In that case, LibVLC will attempt to convert the video format</para>
            <para>(rescaling and chroma conversion) but these operations can be CPU intensive.</para>
            </summary>
            <param name="opaque">
            <para>pointer to the private pointer passed to</para>
            <para>libvlc_video_set_callbacks() [IN/OUT]</para>
            </param>
            <param name="chroma">pointer to the 4 bytes video format identifier [IN/OUT]</param>
            <param name="width">pointer to the pixel width [IN/OUT]</param>
            <param name="height">pointer to the pixel height [IN/OUT]</param>
            <param name="pitches">
            <para>table of scanline pitches in bytes for each pixel plane</para>
            <para>(the table is allocated by LibVLC) [OUT]</para>
            </param>
            <param name="lines">table of scanlines count for each plane [OUT]</param>
            <returns>the number of picture buffers allocated, 0 indicates failure</returns>
            <remarks>
            <para>For each pixels plane, the scanline pitch must be bigger than or equal to</para>
            <para>the number of bytes per pixel multiplied by the pixel width.</para>
            <para>Similarly, the number of scanlines must be bigger than of equal to</para>
            <para>the pixel height.</para>
            <para>Furthermore, we recommend that pitches and lines be multiple of 32</para>
            <para>to not break assumptions that might be held by optimized code</para>
            <para>in the video decoders, video filters and/or video converters.</para>
            </remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcVideoCleanupCb">
            <summary>Callback prototype to configure picture buffers format.</summary>
            <param name="opaque">
            <para>private pointer as passed to libvlc_video_set_callbacks()</para>
            <para>(and possibly modified by</para>
            </param>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcAudioPlayCb">
            <summary>Callback prototype for audio playback.</summary>
            <param name="data">data pointer as passed to libvlc_audio_set_callbacks() [IN]</param>
            <param name="samples">pointer to a table of audio samples to play back [IN]</param>
            <param name="count">number of audio samples to play back</param>
            <param name="pts">expected play time stamp (see libvlc_delay())</param>
            <remarks>
            <para>The LibVLC media player decodes and post-processes the audio signal</para>
            <para>asynchronously (in an internal thread). Whenever audio samples are ready</para>
            <para>to be queued to the output, this callback is invoked.</para>
            <para>The number of samples provided per invocation may depend on the file format,</para>
            <para>the audio coding algorithm, the decoder plug-in, the post-processing</para>
            <para>filters and timing. Application must not assume a certain number of samples.</para>
            <para>The exact format of audio samples is determined by libvlc_audio_set_format()</para>
            <para>or libvlc_audio_set_format_callbacks() as is the channels layout.</para>
            <para>Note that the number of samples is per channel. For instance, if the audio</para>
            <para>track sampling rate is 48000&#160;Hz, then 1200&#160;samples represent 25&#160;milliseconds</para>
            <para>of audio signal - regardless of the number of audio channels.</para>
            </remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcAudioPauseCb">
            <summary>Callback prototype for audio pause.</summary>
            <param name="data">data pointer as passed to libvlc_audio_set_callbacks() [IN]</param>
            <param name="pts">time stamp of the pause request (should be elapsed already)</param>
            <remarks>
            <para>LibVLC invokes this callback to pause audio playback.</para>
            <para>The pause callback is never called if the audio is already paused.</para>
            </remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcAudioResumeCb">
            <summary>Callback prototype for audio resumption.</summary>
            <param name="data">data pointer as passed to libvlc_audio_set_callbacks() [IN]</param>
            <param name="pts">time stamp of the resumption request (should be elapsed already)</param>
            <remarks>
            <para>LibVLC invokes this callback to resume audio playback after it was</para>
            <para>previously paused.</para>
            <para>The resume callback is never called if the audio is not paused.</para>
            </remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcAudioFlushCb">
            <summary>Callback prototype for audio buffer flush.</summary>
            <param name="data">data pointer as passed to libvlc_audio_set_callbacks() [IN]</param>
            <remarks>
            <para>LibVLC invokes this callback if it needs to discard all pending buffers and</para>
            <para>stop playback as soon as possible. This typically occurs when the media is</para>
            <para>stopped.</para>
            </remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcAudioDrainCb">
            <summary>Callback prototype for audio buffer drain.</summary>
            <param name="data">data pointer as passed to libvlc_audio_set_callbacks() [IN]</param>
            <remarks>
            <para>LibVLC may invoke this callback when the decoded audio track is ending.</para>
            <para>There will be no further decoded samples for the track, but playback should</para>
            <para>nevertheless continue until all already pending buffers are rendered.</para>
            </remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcAudioSetVolumeCb">
            <summary>Callback prototype for audio volume change.</summary>
            <param name="data">data pointer as passed to libvlc_audio_set_callbacks() [IN]</param>
            <param name="volume">software volume (1. = nominal, 0. = mute)</param>
            <param name="mute">muted flag</param>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcAudioSetupCb">
            <summary>Callback prototype to setup the audio playback.</summary>
            <param name="opaque">
            <para>pointer to the data pointer passed to</para>
            <para>libvlc_audio_set_callbacks() [IN/OUT]</para>
            </param>
            <param name="format">4 bytes sample format [IN/OUT]</param>
            <param name="rate">sample rate [IN/OUT]</param>
            <param name="channels">channels count [IN/OUT]</param>
            <returns>0 on success, anything else to skip audio playback</returns>
            <remarks>This is called when the media player needs to create a new audio output.</remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcAudioCleanupCb">
            <summary>Callback prototype for audio playback cleanup.</summary>
            <param name="opaque">data pointer as passed to libvlc_audio_set_callbacks() [IN]</param>
            <remarks>This is called when the media player no longer needs an audio output.</remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.TrackDescription">
            <summary>
            <para>Description for video, audio tracks and subtitles. It contains</para>
            <para>id, name (description string) and pointer to next record.</para>
            </summary>
        </member>
        <member name="T:VideoLAN.LibVLC.ChapterDescription">
            <summary>Description for chapters</summary>
        </member>
        <member name="T:VideoLAN.LibVLC.AudioOutputDescription">
            <summary>
            <para>Description for audio output. It contains</para>
            <para>name, description and pointer to next record.</para>
            </summary>
        </member>
        <member name="T:VideoLAN.LibVLC.AudioOutputDevice">
            <summary>Description for audio output device.</summary>
        </member>
        <member name="T:VideoLAN.LibVLC.VideoViewpoint">
            <summary>Viewpoint for video outputs</summary>
            <remarks>allocate using libvlc_video_new_viewpoint()</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerNew(VideoLAN.LibVLC.Instance)">
            <summary>Create an empty Media Player object</summary>
            <param name="p_libvlc_instance">
            <para>the libvlc instance in which the Media Player</para>
            <para>should be created.</para>
            </param>
            <returns>a new media player object, or NULL on error.</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerNewFromMedia(VideoLAN.LibVLC.Media)">
            <summary>Create a Media Player object from a Media</summary>
            <param name="p_md">
            <para>the media. Afterwards the p_md can be safely</para>
            <para>destroyed.</para>
            </param>
            <returns>a new media player object, or NULL on error.</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerRelease(VideoLAN.LibVLC.MediaPlayer)">
            <summary>
            <para>Release a media_player after use</para>
            <para>Decrement the reference count of a media player object. If the</para>
            <para>reference count is 0, then libvlc_media_player_release() will</para>
            <para>release the media player object. If the media player object</para>
            <para>has been released, then it should not be used again.</para>
            </summary>
            <param name="p_mi">the Media Player to free</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerRetain(VideoLAN.LibVLC.MediaPlayer)">
            <summary>
            <para>Retain a reference to a media player object. Use</para>
            <para>libvlc_media_player_release() to decrement reference count.</para>
            </summary>
            <param name="p_mi">media player object</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerSetMedia(VideoLAN.LibVLC.MediaPlayer,VideoLAN.LibVLC.Media)">
            <summary>
            <para>Set the media that will be used by the media_player. If any,</para>
            <para>previous md will be released.</para>
            </summary>
            <param name="p_mi">the Media Player</param>
            <param name="p_md">
            <para>the Media. Afterwards the p_md can be safely</para>
            <para>destroyed.</para>
            </param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerGetMedia(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get the media used by the media_player.</summary>
            <param name="p_mi">the Media Player</param>
            <returns>
            <para>the media associated with p_mi, or NULL if no</para>
            <para>media is associated</para>
            </returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerEventManager(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get the Event Manager from which the media player send event.</summary>
            <param name="p_mi">the Media Player</param>
            <returns>the event manager associated with p_mi</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerIsPlaying(VideoLAN.LibVLC.MediaPlayer)">
            <summary>is_playing</summary>
            <param name="p_mi">the Media Player</param>
            <returns>1 if the media player is playing, 0 otherwise</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerPlay(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Play</summary>
            <param name="p_mi">the Media Player</param>
            <returns>0 if playback started (and was already started), or -1 on error.</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerSetPause(VideoLAN.LibVLC.MediaPlayer,System.Int32)">
            <summary>Pause or resume (no effect if there is no media)</summary>
            <param name="mp">the Media Player</param>
            <param name="do_pause">play/resume if zero, pause if non-zero</param>
            <remarks>LibVLC 1.1.1 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerPause(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Toggle pause (no effect if there is no media)</summary>
            <param name="p_mi">the Media Player</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerStop(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Stop (no effect if there is no media)</summary>
            <param name="p_mi">the Media Player</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerSetRenderer(VideoLAN.LibVLC.MediaPlayer,VideoLAN.LibVLC.RendererItem)">
            <summary>Set a renderer to the media player</summary>
            <param name="p_mi">the Media Player</param>
            <param name="p_item">an item discovered by libvlc_renderer_discoverer_start()</param>
            <returns>0 on success, -1 on error.</returns>
            <remarks>
            <para>must be called before the first call of libvlc_media_player_play() to</para>
            <para>take effect.</para>
            <para>libvlc_renderer_discoverer_new</para>
            <para>LibVLC 3.0.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetCallbacks(VideoLAN.LibVLC.MediaPlayer,VideoLAN.LibVLC.LibvlcVideoLockCb,VideoLAN.LibVLC.LibvlcVideoUnlockCb,VideoLAN.LibVLC.LibvlcVideoDisplayCb,System.IntPtr)">
            <summary>
            <para>Set callbacks and private data to render decoded video to a custom area</para>
            <para>in memory.</para>
            <para>Use libvlc_video_set_format() or libvlc_video_set_format_callbacks()</para>
            <para>to configure the decoded format.</para>
            </summary>
            <param name="mp">the media player</param>
            <param name="lock">callback to lock video memory (must not be NULL)</param>
            <param name="unlock">callback to unlock video memory (or NULL if not needed)</param>
            <param name="display">callback to display video (or NULL if not needed)</param>
            <param name="opaque">private pointer for the three callbacks (as first parameter)</param>
            <remarks>
            <para>Rendering video into custom memory buffers is considerably less</para>
            <para>efficient than rendering in a custom window as normal.</para>
            <para>For optimal perfomances, VLC media player renders into a custom window, and</para>
            <para>does not use this function and associated callbacks. It ishighly</para>
            <para>recommendedthat other LibVLC-based application do likewise.</para>
            <para>To embed video in a window, use libvlc_media_player_set_xid() or equivalent</para>
            <para>depending on the operating system.</para>
            <para>If window embedding does not fit the application use case, then a custom</para>
            <para>LibVLC video output display plugin is required to maintain optimal video</para>
            <para>rendering performances.</para>
            <para>The following limitations affect performance:</para>
            <para>- Hardware video decoding acceleration will either be disabled completely,</para>
            <para>or require (relatively slow) copy from video/DSP memory to main memory.</para>
            <para>- Sub-pictures (subtitles, on-screen display, etc.) must be blent into the</para>
            <para>main picture by the CPU instead of the GPU.</para>
            <para>- Depending on the video format, pixel format conversion, picture scaling,</para>
            <para>cropping and/or picture re-orientation, must be performed by the CPU</para>
            <para>instead of the GPU.</para>
            <para>- Memory copying is required between LibVLC reference picture buffers and</para>
            <para>application buffers (between lock and unlock callbacks).</para>
            <para>LibVLC 1.1.1 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetFormat(VideoLAN.LibVLC.MediaPlayer,System.String,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            <para>Set decoded video chroma and dimensions.</para>
            <para>This only works in combination with libvlc_video_set_callbacks(),</para>
            <para>and is mutually exclusive with libvlc_video_set_format_callbacks().</para>
            </summary>
            <param name="mp">the media player</param>
            <param name="chroma">
            <para>a four-characters string identifying the chroma</para>
            <para>(e.g. &quot;RV32&quot; or &quot;YUYV&quot;)</para>
            </param>
            <param name="width">pixel width</param>
            <param name="height">pixel height</param>
            <param name="pitch">line pitch (in bytes)</param>
            <remarks>
            <para>LibVLC 1.1.1 or later</para>
            <para>All pixel planes are expected to have the same pitch.</para>
            <para>To use the YCbCr color space with chrominance subsampling,</para>
            <para>consider using libvlc_video_set_format_callbacks() instead.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetFormatCallbacks(VideoLAN.LibVLC.MediaPlayer,VideoLAN.LibVLC.LibvlcVideoFormatCb,VideoLAN.LibVLC.LibvlcVideoCleanupCb)">
            <summary>
            <para>Set decoded video chroma and dimensions. This only works in combination with</para>
            <para>libvlc_video_set_callbacks().</para>
            </summary>
            <param name="mp">the media player</param>
            <param name="setup">callback to select the video format (cannot be NULL)</param>
            <param name="cleanup">callback to release any allocated resources (or NULL)</param>
            <remarks>LibVLC 2.0.0 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerSetNsobject(VideoLAN.LibVLC.MediaPlayer,System.IntPtr)">
            <summary>Set the NSView handler where the media player should render its video output.</summary>
            <param name="p_mi">the Media Player</param>
            <param name="drawable">
            <para>the drawable that is either an NSView or an object following</para>
            <para>the VLCOpenGLVideoViewEmbedding protocol.</para>
            </param>
            <remarks>
            <para>Use the vout called &quot;macosx&quot;.</para>
            <para>The drawable is an NSObject that follow the VLCOpenGLVideoViewEmbedding</para>
            <para>protocol:</para>
            <para>Or it can be an NSView object.</para>
            <para>If you want to use it along with Qt see the QMacCocoaViewContainer. Then</para>
            <para>the following code should work:</para>
            <para>You can find a live example in VLCVideoView in VLCKit.framework.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerGetNsobject(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get the NSView handler previously set with libvlc_media_player_set_nsobject().</summary>
            <param name="p_mi">the Media Player</param>
            <returns>the NSView handler or 0 if none where set</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerSetXwindow(VideoLAN.LibVLC.MediaPlayer,System.UInt32)">
            <summary>
            <para>Set an X Window System drawable where the media player should render its</para>
            <para>video output. The call takes effect when the playback starts. If it is</para>
            <para>already started, it might need to be stopped before changes apply.</para>
            <para>If LibVLC was built without X11 output support, then this function has no</para>
            <para>effects.</para>
            </summary>
            <param name="p_mi">media player</param>
            <param name="drawable">X11 window ID</param>
            <remarks>
            <para>By default, LibVLC will capture input events on the video rendering area.</para>
            <para>Use libvlc_video_set_mouse_input() and libvlc_video_set_key_input() to</para>
            <para>disable that and deliver events to the parent window / to the application</para>
            <para>instead. By design, the X11 protocol delivers input events to only one</para>
            <para>recipient.</para>
            <para>The application must call the XInitThreads() function from Xlib before</para>
            <para>libvlc_new(), and before any call to XOpenDisplay() directly or via any</para>
            <para>other library. Failure to call XInitThreads() will seriously impede LibVLC</para>
            <para>performance. Calling XOpenDisplay() before XInitThreads() will eventually</para>
            <para>crash the process. That is a limitation of Xlib.</para>
            <para>The specified identifier must correspond to an existing Input/Output class</para>
            <para>X11 window. Pixmaps arenotcurrently supported. The default X11</para>
            <para>server is assumed, i.e. that specified in the DISPLAY environment variable.</para>
            <para>LibVLC can deal with invalid X11 handle errors, however some display drivers</para>
            <para>(EGL, GLX, VA and/or VDPAU) can unfortunately not. Thus the window handle</para>
            <para>must remain valid until playback is stopped, otherwise the process may</para>
            <para>abort or crash.</para>
            <para>No more than one window handle per media player instance can be specified.</para>
            <para>If the media has multiple simultaneously active video tracks, extra tracks</para>
            <para>will be rendered into external windows beyond the control of the</para>
            <para>application.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerGetXwindow(VideoLAN.LibVLC.MediaPlayer)">
            <summary>
            <para>Get the X Window System window identifier previously set with</para>
            <para>libvlc_media_player_set_xwindow(). Note that this will return the identifier</para>
            <para>even if VLC is not currently using it (for instance if it is playing an</para>
            <para>audio-only input).</para>
            </summary>
            <param name="p_mi">the Media Player</param>
            <returns>an X window ID, or 0 if none where set.</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerSetHwnd(VideoLAN.LibVLC.MediaPlayer,System.IntPtr)">
            <summary>
            <para>Set a Win32/Win64 API window handle (HWND) where the media player should</para>
            <para>render its video output. If LibVLC was built without Win32/Win64 API output</para>
            <para>support, then this has no effects.</para>
            </summary>
            <param name="p_mi">the Media Player</param>
            <param name="drawable">windows handle of the drawable</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerGetHwnd(VideoLAN.LibVLC.MediaPlayer)">
            <summary>
            <para>Get the Windows API window handle (HWND) previously set with</para>
            <para>libvlc_media_player_set_hwnd(). The handle will be returned even if LibVLC</para>
            <para>is not currently outputting any video to it.</para>
            </summary>
            <param name="p_mi">the Media Player</param>
            <returns>a window handle or NULL if there are none.</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerSetAndroidContext(VideoLAN.LibVLC.MediaPlayer,System.IntPtr)">
            <summary>Set the android context.</summary>
            <param name="p_mi">the media player</param>
            <param name="p_awindow_handler">
            <para>org.videolan.libvlc.AWindow jobject owned by the</para>
            <para>org.videolan.libvlc.MediaPlayer class from the libvlc-android project.</para>
            </param>
            <remarks>LibVLC 3.0.0 and later.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerSetEvasObject(VideoLAN.LibVLC.MediaPlayer,System.IntPtr)">
            <summary>Set the EFL Evas Object.</summary>
            <param name="p_mi">the media player</param>
            <param name="p_evas_object">a valid EFL Evas Object (Evas_Object)</param>
            <returns>-1 if an error was detected, 0 otherwise.</returns>
            <remarks>LibVLC 3.0.0 and later.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioSetCallbacks(VideoLAN.LibVLC.MediaPlayer,VideoLAN.LibVLC.LibvlcAudioPlayCb,VideoLAN.LibVLC.LibvlcAudioPauseCb,VideoLAN.LibVLC.LibvlcAudioResumeCb,VideoLAN.LibVLC.LibvlcAudioFlushCb,VideoLAN.LibVLC.LibvlcAudioDrainCb,System.IntPtr)">
            <summary>Sets callbacks and private data for decoded audio.</summary>
            <param name="mp">the media player</param>
            <param name="play">callback to play audio samples (must not be NULL)</param>
            <param name="pause">callback to pause playback (or NULL to ignore)</param>
            <param name="resume">callback to resume playback (or NULL to ignore)</param>
            <param name="flush">callback to flush audio buffers (or NULL to ignore)</param>
            <param name="drain">callback to drain audio buffers (or NULL to ignore)</param>
            <param name="opaque">private pointer for the audio callbacks (as first parameter)</param>
            <remarks>
            <para>Use libvlc_audio_set_format() or libvlc_audio_set_format_callbacks()</para>
            <para>to configure the decoded audio format.</para>
            <para>The audio callbacks override any other audio output mechanism.</para>
            <para>If the callbacks are set, LibVLC willnotoutput audio in any way.</para>
            <para>LibVLC 2.0.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioSetVolumeCallback(VideoLAN.LibVLC.MediaPlayer,VideoLAN.LibVLC.LibvlcAudioSetVolumeCb)">
            <summary>
            <para>Set callbacks and private data for decoded audio. This only works in</para>
            <para>combination with libvlc_audio_set_callbacks().</para>
            <para>Use libvlc_audio_set_format() or libvlc_audio_set_format_callbacks()</para>
            <para>to configure the decoded audio format.</para>
            </summary>
            <param name="mp">the media player</param>
            <param name="set_volume">
            <para>callback to apply audio volume,</para>
            <para>or NULL to apply volume in software</para>
            </param>
            <remarks>LibVLC 2.0.0 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioSetFormatCallbacks(VideoLAN.LibVLC.MediaPlayer,VideoLAN.LibVLC.LibvlcAudioSetupCb,VideoLAN.LibVLC.LibvlcAudioCleanupCb)">
            <summary>Sets decoded audio format via callbacks.</summary>
            <param name="mp">the media player</param>
            <param name="setup">callback to select the audio format (cannot be NULL)</param>
            <param name="cleanup">callback to release any allocated resources (or NULL)</param>
            <remarks>
            <para>This only works in combination with libvlc_audio_set_callbacks().</para>
            <para>LibVLC 2.0.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioSetFormat(VideoLAN.LibVLC.MediaPlayer,System.String,System.UInt32,System.UInt32)">
            <summary>Sets a fixed decoded audio format.</summary>
            <param name="mp">the media player</param>
            <param name="format">
            <para>a four-characters string identifying the sample format</para>
            <para>(e.g. &quot;S16N&quot; or &quot;FL32&quot;)</para>
            </param>
            <param name="rate">sample rate (expressed in Hz)</param>
            <param name="channels">channels count</param>
            <remarks>
            <para>This only works in combination with libvlc_audio_set_callbacks(),</para>
            <para>and is mutually exclusive with libvlc_audio_set_format_callbacks().</para>
            <para>LibVLC 2.0.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerGetLength(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get the current movie length (in ms).</summary>
            <param name="p_mi">the Media Player</param>
            <returns>the movie length (in ms), or -1 if there is no media.</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerGetTime(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get the current movie time (in ms).</summary>
            <param name="p_mi">the Media Player</param>
            <returns>the movie time (in ms), or -1 if there is no media.</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerSetTime(VideoLAN.LibVLC.MediaPlayer,System.Int64)">
            <summary>
            <para>Set the movie time (in ms). This has no effect if no media is being played.</para>
            <para>Not all formats and protocols support this.</para>
            </summary>
            <param name="p_mi">the Media Player</param>
            <param name="i_time">the movie time (in ms).</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerGetPosition(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get movie position as percentage between 0.0 and 1.0.</summary>
            <param name="p_mi">the Media Player</param>
            <returns>movie position, or -1. in case of error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerSetPosition(VideoLAN.LibVLC.MediaPlayer,System.Single)">
            <summary>
            <para>Set movie position as percentage between 0.0 and 1.0.</para>
            <para>This has no effect if playback is not enabled.</para>
            <para>This might not work depending on the underlying input format and protocol.</para>
            </summary>
            <param name="p_mi">the Media Player</param>
            <param name="f_pos">the position</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerSetChapter(VideoLAN.LibVLC.MediaPlayer,System.Int32)">
            <summary>Set movie chapter (if applicable).</summary>
            <param name="p_mi">the Media Player</param>
            <param name="i_chapter">chapter number to play</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerGetChapter(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get movie chapter.</summary>
            <param name="p_mi">the Media Player</param>
            <returns>chapter number currently playing, or -1 if there is no media.</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerGetChapterCount(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get movie chapter count</summary>
            <param name="p_mi">the Media Player</param>
            <returns>number of chapters in movie, or -1.</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerWillPlay(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Is the player able to play</summary>
            <param name="p_mi">the Media Player</param>
            <returns>boolean</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerGetChapterCountForTitle(VideoLAN.LibVLC.MediaPlayer,System.Int32)">
            <summary>Get title chapter count</summary>
            <param name="p_mi">the Media Player</param>
            <param name="i_title">title</param>
            <returns>number of chapters in title, or -1</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerSetTitle(VideoLAN.LibVLC.MediaPlayer,System.Int32)">
            <summary>Set movie title</summary>
            <param name="p_mi">the Media Player</param>
            <param name="i_title">title number to play</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerGetTitle(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get movie title</summary>
            <param name="p_mi">the Media Player</param>
            <returns>title number currently playing, or -1</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerGetTitleCount(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get movie title count</summary>
            <param name="p_mi">the Media Player</param>
            <returns>title number count, or -1</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerPreviousChapter(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Set previous chapter (if applicable)</summary>
            <param name="p_mi">the Media Player</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerNextChapter(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Set next chapter (if applicable)</summary>
            <param name="p_mi">the Media Player</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerGetRate(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get the requested movie play rate.</summary>
            <param name="p_mi">the Media Player</param>
            <returns>movie play rate</returns>
            <remarks>
            <para>Depending on the underlying media, the requested rate may be</para>
            <para>different from the real playback rate.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerSetRate(VideoLAN.LibVLC.MediaPlayer,System.Single)">
            <summary>Set movie play rate</summary>
            <param name="p_mi">the Media Player</param>
            <param name="rate">movie play rate to set</param>
            <returns>
            <para>-1 if an error was detected, 0 otherwise (but even then, it might</para>
            <para>not actually work depending on the underlying media protocol)</para>
            </returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerGetState(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get current movie state</summary>
            <param name="p_mi">the Media Player</param>
            <returns>the current state of the media player (playing, paused, ...)</returns>
            <remarks>libvlc_state_t</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerHasVout(VideoLAN.LibVLC.MediaPlayer)">
            <summary>How many video outputs does this media player have?</summary>
            <param name="p_mi">the media player</param>
            <returns>the number of video outputs</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerIsSeekable(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Is this media player seekable?</summary>
            <param name="p_mi">the media player</param>
            <returns>true if the media player can seek</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerCanPause(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Can this media player be paused?</summary>
            <param name="p_mi">the media player</param>
            <returns>true if the media player can pause</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerProgramScrambled(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Check if the current program is scrambled</summary>
            <param name="p_mi">the media player</param>
            <returns>true if the current program is scrambled</returns>
            <remarks>LibVLC 2.2.0 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerNextFrame(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Display the next frame (if supported)</summary>
            <param name="p_mi">the media player</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerNavigate(VideoLAN.LibVLC.MediaPlayer,System.UInt32)">
            <summary>Navigate through DVD Menu</summary>
            <param name="p_mi">the Media Player</param>
            <param name="navigate">the Navigation mode</param>
            <remarks>libVLC 2.0.0 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerSetVideoTitleDisplay(VideoLAN.LibVLC.MediaPlayer,VideoLAN.LibVLC.Position,System.UInt32)">
            <summary>Set if, and how, the video title will be shown when media is played.</summary>
            <param name="p_mi">the media player</param>
            <param name="position">position at which to display the title, or libvlc_position_disable to prevent the title from being displayed</param>
            <param name="timeout">title display timeout in milliseconds (ignored if libvlc_position_disable)</param>
            <remarks>libVLC 2.1.0 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerAddSlave(VideoLAN.LibVLC.MediaPlayer,VideoLAN.LibVLC.MediaSlaveType,System.String,System.Boolean)">
            <summary>Add a slave to the current media player.</summary>
            <param name="p_mi">the media player</param>
            <param name="i_type">subtitle or audio</param>
            <param name="psz_uri">Uri of the slave (should contain a valid scheme).</param>
            <param name="b_select">True if this slave should be selected when it's loaded</param>
            <returns>0 on success, -1 on error.</returns>
            <remarks>
            <para>If the player is playing, the slave will be added directly. This call</para>
            <para>will also update the slave list of the attached libvlc_media_t.</para>
            <para>LibVLC 3.0.0 and later.</para>
            <para>libvlc_media_slaves_add</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcTrackDescriptionListRelease(VideoLAN.LibVLC.TrackDescription)">
            <summary>Release (free) libvlc_track_description_t</summary>
            <param name="p_track_description">the structure to release</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcToggleFullscreen(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Toggle fullscreen status on non-embedded video outputs.</summary>
            <param name="p_mi">the media player</param>
            <remarks>
            <para>The same limitations applies to this function</para>
            <para>as to libvlc_set_fullscreen().</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcSetFullscreen(VideoLAN.LibVLC.MediaPlayer,System.Int32)">
            <summary>Enable or disable fullscreen.</summary>
            <param name="p_mi">the media player</param>
            <param name="b_fullscreen">boolean for fullscreen status</param>
            <remarks>
            <para>With most window managers, only a top-level windows can be in</para>
            <para>full-screen mode. Hence, this function will not operate properly if</para>
            <para>libvlc_media_player_set_xwindow() was used to embed the video in a</para>
            <para>non-top-level window. In that case, the embedding window must be reparented</para>
            <para>to the root windowbeforefullscreen mode is enabled. You will want</para>
            <para>to reparent it back to its normal parent when disabling fullscreen.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcGetFullscreen(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get current fullscreen status.</summary>
            <param name="p_mi">the media player</param>
            <returns>the fullscreen status (boolean)</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetKeyInput(VideoLAN.LibVLC.MediaPlayer,System.UInt32)">
            <summary>
            <para>Enable or disable key press events handling, according to the LibVLC hotkeys</para>
            <para>configuration. By default and for historical reasons, keyboard events are</para>
            <para>handled by the LibVLC video widget.</para>
            </summary>
            <param name="p_mi">the media player</param>
            <param name="on">true to handle key press events, false to ignore them.</param>
            <remarks>
            <para>On X11, there can be only one subscriber for key press and mouse</para>
            <para>click events per window. If your application has subscribed to those events</para>
            <para>for the X window ID of the video widget, then LibVLC will not be able to</para>
            <para>handle key presses and mouse clicks in any case.</para>
            <para>This function is only implemented for X11 and Win32 at the moment.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetMouseInput(VideoLAN.LibVLC.MediaPlayer,System.UInt32)">
            <summary>
            <para>Enable or disable mouse click events handling. By default, those events are</para>
            <para>handled. This is needed for DVD menus to work, as well as a few video</para>
            <para>filters such as &quot;puzzle&quot;.</para>
            </summary>
            <param name="p_mi">the media player</param>
            <param name="on">true to handle mouse click events, false to ignore them.</param>
            <remarks>
            <para>libvlc_video_set_key_input().</para>
            <para>This function is only implemented for X11 and Win32 at the moment.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoGetSize(VideoLAN.LibVLC.MediaPlayer,System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>Get the pixel dimensions of a video.</summary>
            <param name="p_mi">media player</param>
            <param name="num">number of the video (starting from, and most commonly 0)</param>
            <param name="px">pointer to get the pixel width [OUT]</param>
            <param name="py">pointer to get the pixel height [OUT]</param>
            <returns>0 on success, -1 if the specified video does not exist</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoGetCursor(VideoLAN.LibVLC.MediaPlayer,System.UInt32,System.Int32@,System.Int32@)">
            <summary>
            <para>Get the mouse pointer coordinates over a video.</para>
            <para>Coordinates are expressed in terms of the decoded video resolution,</para>
            <para>notin terms of pixels on the screen/viewport (to get the latter,</para>
            <para>you can query your windowing system directly).</para>
            </summary>
            <param name="p_mi">media player</param>
            <param name="num">number of the video (starting from, and most commonly 0)</param>
            <param name="px">pointer to get the abscissa [OUT]</param>
            <param name="py">pointer to get the ordinate [OUT]</param>
            <returns>0 on success, -1 if the specified video does not exist</returns>
            <remarks>
            <para>Either of the coordinates may be negative or larger than the corresponding</para>
            <para>dimension of the video, if the cursor is outside the rendering area.</para>
            <para>The coordinates may be out-of-date if the pointer is not located</para>
            <para>on the video rendering area. LibVLC does not track the pointer if it is</para>
            <para>outside of the video widget.</para>
            <para>LibVLC does not support multiple pointers (it does of course support</para>
            <para>multiple input devices sharing the same pointer) at the moment.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoGetScale(VideoLAN.LibVLC.MediaPlayer)">
            <summary>
            <para>Get the current video scaling factor.</para>
            <para>See also libvlc_video_set_scale().</para>
            </summary>
            <param name="p_mi">the media player</param>
            <returns>
            <para>the currently configured zoom factor, or 0. if the video is set</para>
            <para>to fit to the output window/drawable automatically.</para>
            </returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetScale(VideoLAN.LibVLC.MediaPlayer,System.Single)">
            <summary>
            <para>Set the video scaling factor. That is the ratio of the number of pixels on</para>
            <para>screen to the number of pixels in the original decoded video in each</para>
            <para>dimension. Zero is a special value; it will adjust the video to the output</para>
            <para>window/drawable (in windowed mode) or the entire screen.</para>
            </summary>
            <param name="p_mi">the media player</param>
            <param name="f_factor">the scaling factor, or zero</param>
            <remarks>Note that not all video outputs support scaling.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoGetAspectRatio(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get current video aspect ratio.</summary>
            <param name="p_mi">the media player</param>
            <returns>
            <para>the video aspect ratio or NULL if unspecified</para>
            <para>(the result must be released with free() or libvlc_free()).</para>
            </returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetAspectRatio(VideoLAN.LibVLC.MediaPlayer,System.String)">
            <summary>Set new video aspect ratio.</summary>
            <param name="p_mi">the media player</param>
            <param name="psz_aspect">new video aspect-ratio or NULL to reset to default</param>
            <remarks>Invalid aspect ratios are ignored.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoNewViewpoint">
            <summary>Create a video viewpoint structure.</summary>
            <returns>
            <para>video viewpoint or NULL</para>
            <para>(the result must be released with free() or libvlc_free()).</para>
            </returns>
            <remarks>LibVLC 3.0.0 and later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoUpdateViewpoint(VideoLAN.LibVLC.MediaPlayer,VideoLAN.LibVLC.VideoViewpoint,System.Boolean)">
            <summary>Update the video viewpoint information.</summary>
            <param name="p_mi">the media player</param>
            <param name="p_viewpoint">video viewpoint allocated via libvlc_video_new_viewpoint()</param>
            <param name="b_absolute">
            <para>if true replace the old viewpoint with the new one. If</para>
            <para>false, increase/decrease it.</para>
            </param>
            <returns>-1 in case of error, 0 otherwise</returns>
            <remarks>
            <para>It is safe to call this function before the media player is started.</para>
            <para>LibVLC 3.0.0 and later</para>
            <para>the values are set asynchronously, it will be used by the next frame displayed.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoGetSpu(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get current video subtitle.</summary>
            <param name="p_mi">the media player</param>
            <returns>the video subtitle selected, or -1 if none</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoGetSpuCount(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get the number of available video subtitles.</summary>
            <param name="p_mi">the media player</param>
            <returns>the number of available video subtitles</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoGetSpuDescription(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get the description of available video subtitles.</summary>
            <param name="p_mi">the media player</param>
            <returns>
            <para>list containing description of available video subtitles.</para>
            <para>It must be freed with libvlc_track_description_list_release()</para>
            </returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetSpu(VideoLAN.LibVLC.MediaPlayer,System.Int32)">
            <summary>Set new video subtitle.</summary>
            <param name="p_mi">the media player</param>
            <param name="i_spu">video subtitle track to select (i_id from track description)</param>
            <returns>0 on success, -1 if out of range</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoGetSpuDelay(VideoLAN.LibVLC.MediaPlayer)">
            <summary>
            <para>Get the current subtitle delay. Positive values means subtitles are being</para>
            <para>displayed later, negative values earlier.</para>
            </summary>
            <param name="p_mi">media player</param>
            <returns>time (in microseconds) the display of subtitles is being delayed</returns>
            <remarks>LibVLC 2.0.0 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetSpuDelay(VideoLAN.LibVLC.MediaPlayer,System.Int64)">
            <summary>
            <para>Set the subtitle delay. This affects the timing of when the subtitle will</para>
            <para>be displayed. Positive values result in subtitles being displayed later,</para>
            <para>while negative values will result in subtitles being displayed earlier.</para>
            </summary>
            <param name="p_mi">media player</param>
            <param name="i_delay">time (in microseconds) the display of subtitles should be delayed</param>
            <returns>0 on success, -1 on error</returns>
            <remarks>
            <para>The subtitle delay will be reset to zero each time the media changes.</para>
            <para>LibVLC 2.0.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerGetFullTitleDescriptions(VideoLAN.LibVLC.MediaPlayer,VideoLAN.LibVLC.TitleDescription)">
            <summary>Get the full description of available titles</summary>
            <param name="p_mi">the media player</param>
            <param name="titles">
            <para>address to store an allocated array of title descriptions</para>
            <para>descriptions (must be freed with libvlc_title_descriptions_release()</para>
            <para>by the caller) [OUT]</para>
            </param>
            <returns>the number of titles (-1 on error)</returns>
            <remarks>LibVLC 3.0.0 and later.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcTitleDescriptionsRelease(VideoLAN.LibVLC.TitleDescription,System.UInt32)">
            <summary>Release a title description</summary>
            <param name="p_titles">title description array to release</param>
            <param name="i_count">number of title descriptions to release</param>
            <remarks>LibVLC 3.0.0 and later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerGetFullChapterDescriptions(VideoLAN.LibVLC.MediaPlayer,System.Int32,VideoLAN.LibVLC.ChapterDescription)">
            <summary>Get the full description of available chapters</summary>
            <param name="p_mi">the media player</param>
            <param name="i_chapters_of_title">index of the title to query for chapters (uses current title if set to -1)</param>
            <param name="pp_chapters">
            <para>address to store an allocated array of chapter descriptions</para>
            <para>descriptions (must be freed with libvlc_chapter_descriptions_release()</para>
            <para>by the caller) [OUT]</para>
            </param>
            <returns>the number of chapters (-1 on error)</returns>
            <remarks>LibVLC 3.0.0 and later.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcChapterDescriptionsRelease(VideoLAN.LibVLC.ChapterDescription,System.UInt32)">
            <summary>Release a chapter description</summary>
            <param name="p_chapters">chapter description array to release</param>
            <param name="i_count">number of chapter descriptions to release</param>
            <remarks>LibVLC 3.0.0 and later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoGetCropGeometry(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get current crop filter geometry.</summary>
            <param name="p_mi">the media player</param>
            <returns>the crop filter geometry or NULL if unset</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetCropGeometry(VideoLAN.LibVLC.MediaPlayer,System.String)">
            <summary>Set new crop filter geometry.</summary>
            <param name="p_mi">the media player</param>
            <param name="psz_geometry">new crop filter geometry (NULL to unset)</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoGetTeletext(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get current teletext page requested or 0 if it's disabled.</summary>
            <param name="p_mi">the media player</param>
            <returns>the current teletext page requested.</returns>
            <remarks>
            <para>Teletext is disabled by default, call libvlc_video_set_teletext() to enable</para>
            <para>it.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetTeletext(VideoLAN.LibVLC.MediaPlayer,System.Int32)">
            <summary>Set new teletext page to retrieve.</summary>
            <param name="p_mi">the media player</param>
            <param name="i_page">
            <para>teletex page number requested. This value can be 0 to disable</para>
            <para>teletext, a number in the range ]0;1000[ to show the requested page, or a</para>
            </param>
            <remarks>This function can also be used to send a teletext key.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoGetTrackCount(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get number of available video tracks.</summary>
            <param name="p_mi">media player</param>
            <returns>the number of available video tracks (int)</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoGetTrackDescription(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get the description of available video tracks.</summary>
            <param name="p_mi">media player</param>
            <returns>
            <para>list with description of available video tracks, or NULL on error.</para>
            <para>It must be freed with libvlc_track_description_list_release()</para>
            </returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoGetTrack(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get current video track.</summary>
            <param name="p_mi">media player</param>
            <returns>the video track ID (int) or -1 if no active input</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetTrack(VideoLAN.LibVLC.MediaPlayer,System.Int32)">
            <summary>Set video track.</summary>
            <param name="p_mi">media player</param>
            <param name="i_track">the track ID (i_id field from track description)</param>
            <returns>0 on success, -1 if out of range</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoTakeSnapshot(VideoLAN.LibVLC.MediaPlayer,System.UInt32,System.String,System.UInt32,System.UInt32)">
            <summary>Take a snapshot of the current video window.</summary>
            <param name="p_mi">media player instance</param>
            <param name="num">number of video output (typically 0 for the first/only one)</param>
            <param name="psz_filepath">the path where to save the screenshot to</param>
            <param name="i_width">the snapshot's width</param>
            <param name="i_height">the snapshot's height</param>
            <returns>0 on success, -1 if the video was not found</returns>
            <remarks>
            <para>If i_width AND i_height is 0, original size is used.</para>
            <para>If i_width XOR i_height is 0, original aspect-ratio is preserved.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetDeinterlace(VideoLAN.LibVLC.MediaPlayer,System.String)">
            <summary>Enable or disable deinterlace filter</summary>
            <param name="p_mi">libvlc media player</param>
            <param name="psz_mode">type of deinterlace filter, NULL to disable</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoGetMarqueeInt(VideoLAN.LibVLC.MediaPlayer,System.UInt32)">
            <summary>Get an integer marquee option value</summary>
            <param name="p_mi">libvlc media player</param>
            <param name="option">marq option to get</param>
            <remarks>libvlc_video_marquee_int_option_t</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoGetMarqueeString(VideoLAN.LibVLC.MediaPlayer,System.UInt32)">
            <summary>Get a string marquee option value</summary>
            <param name="p_mi">libvlc media player</param>
            <param name="option">marq option to get</param>
            <remarks>libvlc_video_marquee_string_option_t</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetMarqueeInt(VideoLAN.LibVLC.MediaPlayer,System.UInt32,System.Int32)">
            <summary>Enable, disable or set an integer marquee option</summary>
            <param name="p_mi">libvlc media player</param>
            <param name="option">marq option to set</param>
            <param name="i_val">marq option value</param>
            <remarks>
            <para>Setting libvlc_marquee_Enable has the side effect of enabling (arg !0)</para>
            <para>or disabling (arg 0) the marq filter.</para>
            <para>libvlc_video_marquee_int_option_t</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetMarqueeString(VideoLAN.LibVLC.MediaPlayer,System.UInt32,System.String)">
            <summary>Set a marquee string option</summary>
            <param name="p_mi">libvlc media player</param>
            <param name="option">marq option to set</param>
            <param name="psz_text">marq option value</param>
            <remarks>libvlc_video_marquee_string_option_t</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoGetLogoInt(VideoLAN.LibVLC.MediaPlayer,System.UInt32)">
            <summary>Get integer logo option.</summary>
            <param name="p_mi">libvlc media player instance</param>
            <param name="option">logo option to get, values of libvlc_video_logo_option_t</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetLogoInt(VideoLAN.LibVLC.MediaPlayer,System.UInt32,System.Int32)">
            <summary>
            <para>Set logo option as integer. Options that take a different type value</para>
            <para>are ignored.</para>
            <para>Passing libvlc_logo_enable as option value has the side effect of</para>
            <para>starting (arg !0) or stopping (arg 0) the logo filter.</para>
            </summary>
            <param name="p_mi">libvlc media player instance</param>
            <param name="option">logo option to set, values of libvlc_video_logo_option_t</param>
            <param name="value">logo option value</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetLogoString(VideoLAN.LibVLC.MediaPlayer,System.UInt32,System.String)">
            <summary>
            <para>Set logo option as string. Options that take a different type value</para>
            <para>are ignored.</para>
            </summary>
            <param name="p_mi">libvlc media player instance</param>
            <param name="option">logo option to set, values of libvlc_video_logo_option_t</param>
            <param name="psz_value">logo option value</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoGetAdjustInt(VideoLAN.LibVLC.MediaPlayer,System.UInt32)">
            <summary>Get integer adjust option.</summary>
            <param name="p_mi">libvlc media player instance</param>
            <param name="option">adjust option to get, values of libvlc_video_adjust_option_t</param>
            <remarks>LibVLC 1.1.1 and later.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetAdjustInt(VideoLAN.LibVLC.MediaPlayer,System.UInt32,System.Int32)">
            <summary>
            <para>Set adjust option as integer. Options that take a different type value</para>
            <para>are ignored.</para>
            <para>Passing libvlc_adjust_enable as option value has the side effect of</para>
            <para>starting (arg !0) or stopping (arg 0) the adjust filter.</para>
            </summary>
            <param name="p_mi">libvlc media player instance</param>
            <param name="option">adust option to set, values of libvlc_video_adjust_option_t</param>
            <param name="value">adjust option value</param>
            <remarks>LibVLC 1.1.1 and later.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoGetAdjustFloat(VideoLAN.LibVLC.MediaPlayer,System.UInt32)">
            <summary>Get float adjust option.</summary>
            <param name="p_mi">libvlc media player instance</param>
            <param name="option">adjust option to get, values of libvlc_video_adjust_option_t</param>
            <remarks>LibVLC 1.1.1 and later.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcVideoSetAdjustFloat(VideoLAN.LibVLC.MediaPlayer,System.UInt32,System.Single)">
            <summary>
            <para>Set adjust option as float. Options that take a different type value</para>
            <para>are ignored.</para>
            </summary>
            <param name="p_mi">libvlc media player instance</param>
            <param name="option">adust option to set, values of libvlc_video_adjust_option_t</param>
            <param name="value">adjust option value</param>
            <remarks>LibVLC 1.1.1 and later.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioOutputListGet(VideoLAN.LibVLC.Instance)">
            <summary>Gets the list of available audio output modules.</summary>
            <param name="p_instance">libvlc instance</param>
            <returns>list of available audio outputs. It must be freed with</returns>
            <remarks>
            <para>libvlc_audio_output_list_release</para>
            <para>libvlc_audio_output_t .</para>
            <para>In case of error, NULL is returned.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioOutputListRelease(VideoLAN.LibVLC.AudioOutputDescription)">
            <summary>Frees the list of available audio output modules.</summary>
            <param name="p_list">list with audio outputs for release</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioOutputSet(VideoLAN.LibVLC.MediaPlayer,System.String)">
            <summary>Selects an audio output module.</summary>
            <param name="p_mi">media player</param>
            <param name="psz_name">
            <para>name of audio output,</para>
            <para>use psz_name of</para>
            </param>
            <returns>0 if function succeeded, -1 on error</returns>
            <remarks>
            <para>Any change will take be effect only after playback is stopped and</para>
            <para>restarted. Audio output cannot be changed while playing.</para>
            <para>libvlc_audio_output_t</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioOutputDeviceEnum(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Gets a list of potential audio output devices,</summary>
            <param name="mp">media player</param>
            <returns>
            <para>A NULL-terminated linked list of potential audio output devices.</para>
            <para>It must be freed with libvlc_audio_output_device_list_release()</para>
            </returns>
            <remarks>
            <para>libvlc_audio_output_device_set().</para>
            <para>Not all audio outputs support enumerating devices.</para>
            <para>The audio output may be functional even if the list is empty (NULL).</para>
            <para>The list may not be exhaustive.</para>
            <para>Some audio output devices in the list might not actually work in</para>
            <para>some circumstances. By default, it is recommended to not specify any</para>
            <para>explicit audio device.</para>
            <para>LibVLC 2.2.0 or later.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioOutputDeviceListGet(VideoLAN.LibVLC.Instance,System.String)">
            <summary>Gets a list of audio output devices for a given audio output module,</summary>
            <param name="p_instance">libvlc instance</param>
            <param name="aout">
            <para>audio output name</para>
            <para>(as returned by libvlc_audio_output_list_get())</para>
            </param>
            <returns>
            <para>A NULL-terminated linked list of potential audio output devices.</para>
            <para>It must be freed with libvlc_audio_output_device_list_release()</para>
            </returns>
            <remarks>
            <para>libvlc_audio_output_device_set().</para>
            <para>Not all audio outputs support this. In particular, an empty (NULL)</para>
            <para>list of devices doesnotimply that the specified audio output does</para>
            <para>not work.</para>
            <para>The list might not be exhaustive.</para>
            <para>Some audio output devices in the list might not actually work in</para>
            <para>some circumstances. By default, it is recommended to not specify any</para>
            <para>explicit audio device.</para>
            <para>LibVLC 2.1.0 or later.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioOutputDeviceListRelease(VideoLAN.LibVLC.AudioOutputDevice)">
            <summary>Frees a list of available audio output devices.</summary>
            <param name="p_list">list with audio outputs for release</param>
            <remarks>LibVLC 2.1.0 or later.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioOutputDeviceSet(VideoLAN.LibVLC.MediaPlayer,System.String,System.String)">
            <summary>Configures an explicit audio output device.</summary>
            <param name="mp">media player</param>
            <param name="module">
            <para>If NULL, current audio output module.</para>
            <para>if non-NULL, name of audio output module</para>
            <para>(</para>
            </param>
            <param name="device_id">device identifier string</param>
            <returns>Nothing. Errors are ignored (this is a design bug).</returns>
            <remarks>
            <para>If the module paramater is NULL, audio output will be moved to the device</para>
            <para>specified by the device identifier string immediately. This is the</para>
            <para>recommended usage.</para>
            <para>A list of adequate potential device strings can be obtained with</para>
            <para>libvlc_audio_output_device_enum().</para>
            <para>However passing NULL is supported in LibVLC version 2.2.0 and later only;</para>
            <para>in earlier versions, this function would have no effects when the module</para>
            <para>parameter was NULL.</para>
            <para>If the module parameter is not NULL, the device parameter of the</para>
            <para>corresponding audio output, if it exists, will be set to the specified</para>
            <para>string. Note that some audio output modules do not have such a parameter</para>
            <para>(notably MMDevice and PulseAudio).</para>
            <para>A list of adequate potential device strings can be obtained with</para>
            <para>libvlc_audio_output_device_list_get().</para>
            <para>This function does not select the specified audio output plugin.</para>
            <para>libvlc_audio_output_set() is used for that purpose.</para>
            <para>The syntax for the device parameter depends on the audio output.</para>
            <para>Some audio output modules require further parameters (e.g. a channels map</para>
            <para>in the case of ALSA).</para>
            <para>libvlc_audio_output_t)</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioOutputDeviceGet(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get the current audio output device identifier.</summary>
            <param name="mp">media player</param>
            <returns>
            <para>the current audio output device identifier</para>
            <para>NULL if no device is selected or in case of error</para>
            <para>(the result must be released with free() or libvlc_free()).</para>
            </returns>
            <remarks>
            <para>This complements libvlc_audio_output_device_set().</para>
            <para>The initial value for the current audio output device identifier</para>
            <para>may not be set or may be some unknown value. A LibVLC application should</para>
            <para>compare this value against the known device identifiers (e.g. those that</para>
            <para>were previously retrieved by a call to libvlc_audio_output_device_enum or</para>
            <para>libvlc_audio_output_device_list_get) to find the current audio output device.</para>
            <para>It is possible that the selected audio output device changes (an external</para>
            <para>change) without a call to libvlc_audio_output_device_set. That may make this</para>
            <para>method unsuitable to use if a LibVLC application is attempting to track</para>
            <para>dynamic audio device changes as they happen.</para>
            <para>LibVLC 3.0.0 or later.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioToggleMute(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Toggle mute status.</summary>
            <param name="p_mi">media player</param>
            <remarks>
            <para>Toggling mute atomically is not always possible: On some platforms,</para>
            <para>other processes can mute the VLC audio playback stream asynchronously. Thus,</para>
            <para>there is a small race condition where toggling will not work.</para>
            <para>See also the limitations of libvlc_audio_set_mute().</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioGetMute(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get current mute status.</summary>
            <param name="p_mi">media player</param>
            <returns>the mute status (boolean) if defined, -1 if undefined/unapplicable</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioSetMute(VideoLAN.LibVLC.MediaPlayer,System.Int32)">
            <summary>Set mute status.</summary>
            <param name="p_mi">media player</param>
            <param name="status">If status is true then mute, otherwise unmute</param>
            <remarks>
            <para>This function does not always work. If there are no active audio</para>
            <para>playback stream, the mute status might not be available. If digital</para>
            <para>pass-through (S/PDIF, HDMI...) is in use, muting may be unapplicable. Also</para>
            <para>some audio output plugins do not support muting at all.</para>
            <para>To force silent playback, disable all audio tracks. This is more</para>
            <para>efficient and reliable than mute.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioGetVolume(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get current software audio volume.</summary>
            <param name="p_mi">media player</param>
            <returns>
            <para>the software volume in percents</para>
            <para>(0 = mute, 100 = nominal / 0dB)</para>
            </returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioSetVolume(VideoLAN.LibVLC.MediaPlayer,System.Int32)">
            <summary>Set current software audio volume.</summary>
            <param name="p_mi">media player</param>
            <param name="i_volume">the volume in percents (0 = mute, 100 = 0dB)</param>
            <returns>0 if the volume was set, -1 if it was out of range</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioGetTrackCount(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get number of available audio tracks.</summary>
            <param name="p_mi">media player</param>
            <returns>the number of available audio tracks (int), or -1 if unavailable</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioGetTrackDescription(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get the description of available audio tracks.</summary>
            <param name="p_mi">media player</param>
            <returns>
            <para>list with description of available audio tracks, or NULL.</para>
            <para>It must be freed with libvlc_track_description_list_release()</para>
            </returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioGetTrack(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get current audio track.</summary>
            <param name="p_mi">media player</param>
            <returns>the audio track ID or -1 if no active input.</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioSetTrack(VideoLAN.LibVLC.MediaPlayer,System.Int32)">
            <summary>Set current audio track.</summary>
            <param name="p_mi">media player</param>
            <param name="i_track">the track ID (i_id field from track description)</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioGetChannel(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get current audio channel.</summary>
            <param name="p_mi">media player</param>
            <returns>the audio channel</returns>
            <remarks>libvlc_audio_output_channel_t</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioSetChannel(VideoLAN.LibVLC.MediaPlayer,System.Int32)">
            <summary>Set current audio channel.</summary>
            <param name="p_mi">media player</param>
            <param name="channel">the audio channel,</param>
            <returns>0 on success, -1 on error</returns>
            <remarks>libvlc_audio_output_channel_t</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioGetDelay(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get current audio delay.</summary>
            <param name="p_mi">media player</param>
            <returns>the audio delay (microseconds)</returns>
            <remarks>LibVLC 1.1.1 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioSetDelay(VideoLAN.LibVLC.MediaPlayer,System.Int64)">
            <summary>Set current audio delay. The audio delay will be reset to zero each time the media changes.</summary>
            <param name="p_mi">media player</param>
            <param name="i_delay">the audio delay (microseconds)</param>
            <returns>0 on success, -1 on error</returns>
            <remarks>LibVLC 1.1.1 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioEqualizerGetPresetCount">
            <summary>Get the number of equalizer presets.</summary>
            <returns>number of presets</returns>
            <remarks>LibVLC 2.2.0 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioEqualizerGetPresetName(System.UInt32)">
            <summary>Get the name of a particular equalizer preset.</summary>
            <param name="u_index">index of the preset, counting from zero</param>
            <returns>preset name, or NULL if there is no such preset</returns>
            <remarks>
            <para>This name can be used, for example, to prepare a preset label or menu in a user</para>
            <para>interface.</para>
            <para>LibVLC 2.2.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioEqualizerGetBandCount">
            <summary>Get the number of distinct frequency bands for an equalizer.</summary>
            <returns>number of frequency bands</returns>
            <remarks>LibVLC 2.2.0 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioEqualizerGetBandFrequency(System.UInt32)">
            <summary>Get a particular equalizer band frequency.</summary>
            <param name="u_index">index of the band, counting from zero</param>
            <returns>equalizer band frequency (Hz), or -1 if there is no such band</returns>
            <remarks>
            <para>This value can be used, for example, to create a label for an equalizer band control</para>
            <para>in a user interface.</para>
            <para>LibVLC 2.2.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioEqualizerNew">
            <summary>Create a new default equalizer, with all frequency values zeroed.</summary>
            <returns>opaque equalizer handle, or NULL on error</returns>
            <remarks>
            <para>The new equalizer can subsequently be applied to a media player by invoking</para>
            <para>libvlc_media_player_set_equalizer().</para>
            <para>The returned handle should be freed via libvlc_audio_equalizer_release() when</para>
            <para>it is no longer needed.</para>
            <para>LibVLC 2.2.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioEqualizerNewFromPreset(System.UInt32)">
            <summary>
            <para>Create a new equalizer, with initial frequency values copied from an existing</para>
            <para>preset.</para>
            </summary>
            <param name="u_index">index of the preset, counting from zero</param>
            <returns>opaque equalizer handle, or NULL on error</returns>
            <remarks>
            <para>The new equalizer can subsequently be applied to a media player by invoking</para>
            <para>libvlc_media_player_set_equalizer().</para>
            <para>The returned handle should be freed via libvlc_audio_equalizer_release() when</para>
            <para>it is no longer needed.</para>
            <para>LibVLC 2.2.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioEqualizerRelease(VideoLAN.LibVLC.Equalizer)">
            <summary>Release a previously created equalizer instance.</summary>
            <param name="p_equalizer">opaque equalizer handle, or NULL</param>
            <remarks>
            <para>The equalizer was previously created by using libvlc_audio_equalizer_new() or</para>
            <para>libvlc_audio_equalizer_new_from_preset().</para>
            <para>It is safe to invoke this method with a NULL p_equalizer parameter for no effect.</para>
            <para>LibVLC 2.2.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioEqualizerSetPreamp(VideoLAN.LibVLC.Equalizer,System.Single)">
            <summary>Set a new pre-amplification value for an equalizer.</summary>
            <param name="p_equalizer">valid equalizer handle, must not be NULL</param>
            <param name="f_preamp">preamp value (-20.0 to 20.0 Hz)</param>
            <returns>zero on success, -1 on error</returns>
            <remarks>
            <para>The new equalizer settings are subsequently applied to a media player by invoking</para>
            <para>libvlc_media_player_set_equalizer().</para>
            <para>The supplied amplification value will be clamped to the -20.0 to +20.0 range.</para>
            <para>LibVLC 2.2.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioEqualizerGetPreamp(VideoLAN.LibVLC.Equalizer)">
            <summary>Get the current pre-amplification value from an equalizer.</summary>
            <param name="p_equalizer">valid equalizer handle, must not be NULL</param>
            <returns>preamp value (Hz)</returns>
            <remarks>LibVLC 2.2.0 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioEqualizerSetAmpAtIndex(VideoLAN.LibVLC.Equalizer,System.Single,System.UInt32)">
            <summary>Set a new amplification value for a particular equalizer frequency band.</summary>
            <param name="p_equalizer">valid equalizer handle, must not be NULL</param>
            <param name="f_amp">amplification value (-20.0 to 20.0 Hz)</param>
            <param name="u_band">index, counting from zero, of the frequency band to set</param>
            <returns>zero on success, -1 on error</returns>
            <remarks>
            <para>The new equalizer settings are subsequently applied to a media player by invoking</para>
            <para>libvlc_media_player_set_equalizer().</para>
            <para>The supplied amplification value will be clamped to the -20.0 to +20.0 range.</para>
            <para>LibVLC 2.2.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcAudioEqualizerGetAmpAtIndex(VideoLAN.LibVLC.Equalizer,System.UInt32)">
            <summary>Get the amplification value for a particular equalizer frequency band.</summary>
            <param name="p_equalizer">valid equalizer handle, must not be NULL</param>
            <param name="u_band">index, counting from zero, of the frequency band to get</param>
            <returns>amplification value (Hz); NaN if there is no such frequency band</returns>
            <remarks>LibVLC 2.2.0 or later</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerSetEqualizer(VideoLAN.LibVLC.MediaPlayer,VideoLAN.LibVLC.Equalizer)">
            <summary>Apply new equalizer settings to a media player.</summary>
            <param name="p_mi">opaque media player handle</param>
            <param name="p_equalizer">opaque equalizer handle, or NULL to disable the equalizer for this media player</param>
            <returns>zero on success, -1 on error</returns>
            <remarks>
            <para>The equalizer is first created by invoking libvlc_audio_equalizer_new() or</para>
            <para>libvlc_audio_equalizer_new_from_preset().</para>
            <para>It is possible to apply new equalizer settings to a media player whether the media</para>
            <para>player is currently playing media or not.</para>
            <para>Invoking this method will immediately apply the new equalizer settings to the audio</para>
            <para>output of the currently playing media if there is any.</para>
            <para>If there is no currently playing media, the new equalizer settings will be applied</para>
            <para>later if and when new media is played.</para>
            <para>Equalizer settings will automatically be applied to subsequently played media.</para>
            <para>To disable the equalizer for a media player invoke this method passing NULL for the</para>
            <para>p_equalizer parameter.</para>
            <para>The media player does not keep a reference to the supplied equalizer so it is safe</para>
            <para>for an application to release the equalizer reference any time after this method</para>
            <para>returns.</para>
            <para>LibVLC 2.2.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerGetRole(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Gets the media role.</summary>
            <param name="p_mi">media player</param>
            <returns>the media player role (</returns>
            <remarks>LibVLC 3.0.0 and later.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_player.LibvlcMediaPlayerSetRole(VideoLAN.LibVLC.MediaPlayer,System.UInt32)">
            <summary>Sets the media role.</summary>
            <param name="p_mi">media player</param>
            <param name="role">the media player role (</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="T:VideoLAN.LibVLC.libvlc_media_list">
            <summary>A LibVLC media list holds multiple</summary>
            <remarks>
            <para>@{</para>
            <para></para>
            <para>LibVLC media list (playlist) external API</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list.LibvlcMediaListNew(VideoLAN.LibVLC.Instance)">
            <summary>Create an empty media list.</summary>
            <param name="p_instance">libvlc instance</param>
            <returns>empty media list, or NULL on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list.LibvlcMediaListRelease(VideoLAN.LibVLC.MediaList)">
            <summary>Release media list created with libvlc_media_list_new().</summary>
            <param name="p_ml">a media list created with libvlc_media_list_new()</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list.LibvlcMediaListRetain(VideoLAN.LibVLC.MediaList)">
            <summary>Retain reference to a media list</summary>
            <param name="p_ml">a media list created with libvlc_media_list_new()</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list.LibvlcMediaListSetMedia(VideoLAN.LibVLC.MediaList,VideoLAN.LibVLC.Media)">
            <summary>
            <para>Associate media instance with this media list instance.</para>
            <para>If another media instance was present it will be released.</para>
            <para>The libvlc_media_list_lock should NOT be held upon entering this function.</para>
            </summary>
            <param name="p_ml">a media list instance</param>
            <param name="p_md">media instance to add</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list.LibvlcMediaListMedia(VideoLAN.LibVLC.MediaList)">
            <summary>
            <para>Get media instance from this media list instance. This action will increase</para>
            <para>the refcount on the media instance.</para>
            <para>The libvlc_media_list_lock should NOT be held upon entering this function.</para>
            </summary>
            <param name="p_ml">a media list instance</param>
            <returns>media instance</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list.LibvlcMediaListAddMedia(VideoLAN.LibVLC.MediaList,VideoLAN.LibVLC.Media)">
            <summary>
            <para>Add media instance to media list</para>
            <para>The libvlc_media_list_lock should be held upon entering this function.</para>
            </summary>
            <param name="p_ml">a media list instance</param>
            <param name="p_md">a media instance</param>
            <returns>0 on success, -1 if the media list is read-only</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list.LibvlcMediaListInsertMedia(VideoLAN.LibVLC.MediaList,VideoLAN.LibVLC.Media,System.Int32)">
            <summary>
            <para>Insert media instance in media list on a position</para>
            <para>The libvlc_media_list_lock should be held upon entering this function.</para>
            </summary>
            <param name="p_ml">a media list instance</param>
            <param name="p_md">a media instance</param>
            <param name="i_pos">position in array where to insert</param>
            <returns>0 on success, -1 if the media list is read-only</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list.LibvlcMediaListRemoveIndex(VideoLAN.LibVLC.MediaList,System.Int32)">
            <summary>
            <para>Remove media instance from media list on a position</para>
            <para>The libvlc_media_list_lock should be held upon entering this function.</para>
            </summary>
            <param name="p_ml">a media list instance</param>
            <param name="i_pos">position in array where to insert</param>
            <returns>0 on success, -1 if the list is read-only or the item was not found</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list.LibvlcMediaListCount(VideoLAN.LibVLC.MediaList)">
            <summary>
            <para>Get count on media list items</para>
            <para>The libvlc_media_list_lock should be held upon entering this function.</para>
            </summary>
            <param name="p_ml">a media list instance</param>
            <returns>number of items in media list</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list.LibvlcMediaListItemAtIndex(VideoLAN.LibVLC.MediaList,System.Int32)">
            <summary>
            <para>List media instance in media list at a position</para>
            <para>The libvlc_media_list_lock should be held upon entering this function.</para>
            </summary>
            <param name="p_ml">a media list instance</param>
            <param name="i_pos">position in array where to insert</param>
            <returns>
            <para>media instance at position i_pos, or NULL if not found.</para>
            <para>In case of success, libvlc_media_retain() is called to increase the refcount</para>
            <para>on the media.</para>
            </returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list.LibvlcMediaListIndexOfItem(VideoLAN.LibVLC.MediaList,VideoLAN.LibVLC.Media)">
            <summary>
            <para>Find index position of List media instance in media list.</para>
            <para>Warning: the function will return the first matched position.</para>
            <para>The libvlc_media_list_lock should be held upon entering this function.</para>
            </summary>
            <param name="p_ml">a media list instance</param>
            <param name="p_md">media instance</param>
            <returns>position of media instance or -1 if media not found</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list.LibvlcMediaListIsReadonly(VideoLAN.LibVLC.MediaList)">
            <summary>This indicates if this media list is read-only from a user point of view</summary>
            <param name="p_ml">media list instance</param>
            <returns>1 on readonly, 0 on readwrite</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list.LibvlcMediaListLock(VideoLAN.LibVLC.MediaList)">
            <summary>Get lock on media list items</summary>
            <param name="p_ml">a media list instance</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list.LibvlcMediaListUnlock(VideoLAN.LibVLC.MediaList)">
            <summary>
            <para>Release lock on media list items</para>
            <para>The libvlc_media_list_lock should be held upon entering this function.</para>
            </summary>
            <param name="p_ml">a media list instance</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list.LibvlcMediaListEventManager(VideoLAN.LibVLC.MediaList)">
            <summary>
            <para>Get libvlc_event_manager from this media list instance.</para>
            <para>The p_event_manager is immutable, so you don't have to hold the lock</para>
            </summary>
            <param name="p_ml">a media list instance</param>
            <returns>libvlc_event_manager</returns>
        </member>
        <member name="T:VideoLAN.LibVLC.PlaybackMode">
            <summary>Defines playback modes for playlist.</summary>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcMediaListPlayerT">
            <summary>The LibVLC media list player plays a</summary>
            <remarks>
            <para>in a certain order.</para>
            <para>This is required to especially support playlist files.</para>
            <para>The normal</para>
            <para>single media, and does not handle playlist files properly.</para>
            <para>@{</para>
            <para></para>
            <para>LibVLC media list player external API</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list_player.LibvlcMediaListPlayerNew(VideoLAN.LibVLC.Instance)">
            <summary>Create new media_list_player.</summary>
            <param name="p_instance">libvlc instance</param>
            <returns>media list player instance or NULL on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list_player.LibvlcMediaListPlayerRelease(VideoLAN.LibVLC.LibvlcMediaListPlayerT)">
            <summary>
            <para>Release a media_list_player after use</para>
            <para>Decrement the reference count of a media player object. If the</para>
            <para>reference count is 0, then libvlc_media_list_player_release() will</para>
            <para>release the media player object. If the media player object</para>
            <para>has been released, then it should not be used again.</para>
            </summary>
            <param name="p_mlp">media list player instance</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list_player.LibvlcMediaListPlayerRetain(VideoLAN.LibVLC.LibvlcMediaListPlayerT)">
            <summary>
            <para>Retain a reference to a media player list object. Use</para>
            <para>libvlc_media_list_player_release() to decrement reference count.</para>
            </summary>
            <param name="p_mlp">media player list object</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list_player.LibvlcMediaListPlayerEventManager(VideoLAN.LibVLC.LibvlcMediaListPlayerT)">
            <summary>Return the event manager of this media_list_player.</summary>
            <param name="p_mlp">media list player instance</param>
            <returns>the event manager</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list_player.LibvlcMediaListPlayerSetMediaPlayer(VideoLAN.LibVLC.LibvlcMediaListPlayerT,VideoLAN.LibVLC.MediaPlayer)">
            <summary>Replace media player in media_list_player with this instance.</summary>
            <param name="p_mlp">media list player instance</param>
            <param name="p_mi">media player instance</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list_player.LibvlcMediaListPlayerGetMediaPlayer(VideoLAN.LibVLC.LibvlcMediaListPlayerT)">
            <summary>Get media player of the media_list_player instance.</summary>
            <param name="p_mlp">media list player instance</param>
            <returns>media player instance</returns>
            <remarks>the caller is responsible for releasing the returned instance</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list_player.LibvlcMediaListPlayerSetMediaList(VideoLAN.LibVLC.LibvlcMediaListPlayerT,VideoLAN.LibVLC.MediaList)">
            <summary>Set the media list associated with the player</summary>
            <param name="p_mlp">media list player instance</param>
            <param name="p_mlist">list of media</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list_player.LibvlcMediaListPlayerPlay(VideoLAN.LibVLC.LibvlcMediaListPlayerT)">
            <summary>Play media list</summary>
            <param name="p_mlp">media list player instance</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list_player.LibvlcMediaListPlayerPause(VideoLAN.LibVLC.LibvlcMediaListPlayerT)">
            <summary>Toggle pause (or resume) media list</summary>
            <param name="p_mlp">media list player instance</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list_player.LibvlcMediaListPlayerIsPlaying(VideoLAN.LibVLC.LibvlcMediaListPlayerT)">
            <summary>Is media list playing?</summary>
            <param name="p_mlp">media list player instance</param>
            <returns>true for playing and false for not playing</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list_player.LibvlcMediaListPlayerGetState(VideoLAN.LibVLC.LibvlcMediaListPlayerT)">
            <summary>Get current libvlc_state of media list player</summary>
            <param name="p_mlp">media list player instance</param>
            <returns>libvlc_state_t for media list player</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list_player.LibvlcMediaListPlayerPlayItemAtIndex(VideoLAN.LibVLC.LibvlcMediaListPlayerT,System.Int32)">
            <summary>Play media list item at position index</summary>
            <param name="p_mlp">media list player instance</param>
            <param name="i_index">index in media list to play</param>
            <returns>0 upon success -1 if the item wasn't found</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list_player.LibvlcMediaListPlayerPlayItem(VideoLAN.LibVLC.LibvlcMediaListPlayerT,VideoLAN.LibVLC.Media)">
            <summary>Play the given media item</summary>
            <param name="p_mlp">media list player instance</param>
            <param name="p_md">the media instance</param>
            <returns>0 upon success, -1 if the media is not part of the media list</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list_player.LibvlcMediaListPlayerStop(VideoLAN.LibVLC.LibvlcMediaListPlayerT)">
            <summary>Stop playing media list</summary>
            <param name="p_mlp">media list player instance</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list_player.LibvlcMediaListPlayerNext(VideoLAN.LibVLC.LibvlcMediaListPlayerT)">
            <summary>Play next item from media list</summary>
            <param name="p_mlp">media list player instance</param>
            <returns>0 upon success -1 if there is no next item</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list_player.LibvlcMediaListPlayerPrevious(VideoLAN.LibVLC.LibvlcMediaListPlayerT)">
            <summary>Play previous item from media list</summary>
            <param name="p_mlp">media list player instance</param>
            <returns>0 upon success -1 if there is no previous item</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_list_player.LibvlcMediaListPlayerSetPlaybackMode(VideoLAN.LibVLC.LibvlcMediaListPlayerT,VideoLAN.LibVLC.PlaybackMode)">
            <summary>Sets the playback mode for the playlist</summary>
            <param name="p_mlp">media list player instance</param>
            <param name="e_mode">playback mode specification</param>
        </member>
        <member name="T:VideoLAN.LibVLC.LibvlcMediaLibraryT">
            <summary>
            <para>@{</para>
            <para></para>
            <para>LibVLC media library external API</para>
            </summary>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_library.LibvlcMediaLibraryNew(VideoLAN.LibVLC.Instance)">
            <summary>Create an new Media Library object</summary>
            <param name="p_instance">the libvlc instance</param>
            <returns>a new object or NULL on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_library.LibvlcMediaLibraryRelease(VideoLAN.LibVLC.LibvlcMediaLibraryT)">
            <summary>
            <para>Release media library object. This functions decrements the</para>
            <para>reference count of the media library object. If it reaches 0,</para>
            <para>then the object will be released.</para>
            </summary>
            <param name="p_mlib">media library object</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_library.LibvlcMediaLibraryRetain(VideoLAN.LibVLC.LibvlcMediaLibraryT)">
            <summary>
            <para>Retain a reference to a media library object. This function will</para>
            <para>increment the reference counting for this object. Use</para>
            <para>libvlc_media_library_release() to decrement the reference count.</para>
            </summary>
            <param name="p_mlib">media library object</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_library.LibvlcMediaLibraryLoad(VideoLAN.LibVLC.LibvlcMediaLibraryT)">
            <summary>Load media library.</summary>
            <param name="p_mlib">media library object</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_library.LibvlcMediaLibraryMediaList(VideoLAN.LibVLC.LibvlcMediaLibraryT)">
            <summary>Get media library subitems.</summary>
            <param name="p_mlib">media library object</param>
            <returns>media list subitems</returns>
        </member>
        <member name="T:VideoLAN.LibVLC.MediaDiscovererCategory">
            <summary>Category of a media discoverer</summary>
            <remarks>libvlc_media_discoverer_list_get()</remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.MediaDiscovererCategory.Devices">
            <summary>devices, like portable music player</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.MediaDiscovererCategory.Lan">
            <summary>LAN/WAN services, like Upnp, SMB, or SAP</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.MediaDiscovererCategory.Podcasts">
            <summary>Podcasts</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.MediaDiscovererCategory.Localdirs">
            <summary>Local directories, like Video, Music or Pictures directories</summary>
        </member>
        <member name="T:VideoLAN.LibVLC.MediaDiscoverer">
            <summary>
            <para>LibVLC media discovery finds available media via various means.</para>
            <para>This corresponds to the service discovery functionality in VLC media player.</para>
            <para>Different plugins find potential medias locally (e.g. user media directory),</para>
            <para>from peripherals (e.g. video capture device), on the local network</para>
            <para>(e.g. SAP) or on the Internet (e.g. Internet radios).</para>
            <para>@{</para>
            <para></para>
            <para>LibVLC media discovery external API</para>
            </summary>
        </member>
        <member name="T:VideoLAN.LibVLC.MediaDiscovererDescription">
            <summary>Media discoverer description</summary>
            <remarks>libvlc_media_discoverer_list_get()</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_discoverer.LibvlcMediaDiscovererNew(VideoLAN.LibVLC.Instance,System.String)">
            <summary>Create a media discoverer object by name.</summary>
            <param name="p_inst">libvlc instance</param>
            <param name="psz_name">
            <para>service name; use libvlc_media_discoverer_list_get() to get</para>
            <para>a list of the discoverer names available in this libVLC instance</para>
            </param>
            <returns>media discover object or NULL in case of error</returns>
            <remarks>
            <para>After this object is created, you should attach to media_list events in</para>
            <para>order to be notified of new items discovered.</para>
            <para>You need to call libvlc_media_discoverer_start() in order to start the</para>
            <para>discovery.</para>
            <para>libvlc_media_discoverer_media_list</para>
            <para>libvlc_media_discoverer_event_manager</para>
            <para>libvlc_media_discoverer_start</para>
            <para>LibVLC 3.0.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_discoverer.LibvlcMediaDiscovererStart(VideoLAN.LibVLC.MediaDiscoverer)">
            <summary>Start media discovery.</summary>
            <param name="p_mdis">media discover object</param>
            <returns>-1 in case of error, 0 otherwise</returns>
            <remarks>
            <para>To stop it, call libvlc_media_discoverer_stop() or</para>
            <para>libvlc_media_discoverer_list_release() directly.</para>
            <para>libvlc_media_discoverer_stop</para>
            <para>LibVLC 3.0.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_discoverer.LibvlcMediaDiscovererStop(VideoLAN.LibVLC.MediaDiscoverer)">
            <summary>Stop media discovery.</summary>
            <param name="p_mdis">media discover object</param>
            <remarks>
            <para>libvlc_media_discoverer_start</para>
            <para>LibVLC 3.0.0 or later</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_discoverer.LibvlcMediaDiscovererRelease(VideoLAN.LibVLC.MediaDiscoverer)">
            <summary>
            <para>Release media discover object. If the reference count reaches 0, then</para>
            <para>the object will be released.</para>
            </summary>
            <param name="p_mdis">media service discover object</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_discoverer.LibvlcMediaDiscovererMediaList(VideoLAN.LibVLC.MediaDiscoverer)">
            <summary>Get media service discover media list.</summary>
            <param name="p_mdis">media service discover object</param>
            <returns>list of media items</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_discoverer.LibvlcMediaDiscovererIsRunning(VideoLAN.LibVLC.MediaDiscoverer)">
            <summary>Query if media service discover object is running.</summary>
            <param name="p_mdis">media service discover object</param>
            <returns>true if running, false if not</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_discoverer.LibvlcMediaDiscovererListGet(VideoLAN.LibVLC.Instance,VideoLAN.LibVLC.MediaDiscovererCategory,VideoLAN.LibVLC.MediaDiscovererDescription)">
            <summary>Get media discoverer services by category</summary>
            <param name="p_inst">libvlc instance</param>
            <param name="i_cat">category of services to fetch</param>
            <param name="ppp_services">
            <para>address to store an allocated array of media discoverer</para>
            <para>services (must be freed with libvlc_media_discoverer_list_release() by</para>
            <para>the caller) [OUT]</para>
            </param>
            <returns>the number of media discoverer services (0 on error)</returns>
            <remarks>LibVLC 3.0.0 and later.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_media_discoverer.LibvlcMediaDiscovererListRelease(VideoLAN.LibVLC.MediaDiscovererDescription,System.UInt64)">
            <summary>Release an array of media discoverer services</summary>
            <param name="pp_services">array to release</param>
            <param name="i_count">number of elements in the array</param>
            <remarks>
            <para>LibVLC 3.0.0 and later.</para>
            <para>libvlc_media_discoverer_list_get()</para>
            </remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.EventType">
            <summary>Event types</summary>
        </member>
        <member name="F:VideoLAN.LibVLC.EventType.MediaDiscovererStarted">
            <remarks>
            <para>Useless event, it will be triggered only when calling</para>
            <para>libvlc_media_discoverer_start()</para>
            </remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.EventType.MediaDiscovererEnded">
            <remarks>
            <para>Useless event, it will be triggered only when calling</para>
            <para>libvlc_media_discoverer_stop()</para>
            </remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.EventType.RendererDiscovererItemAdded">
            <remarks>
            <para>Useless event, it will be triggered only when calling</para>
            <para>libvlc_media_discoverer_stop()</para>
            </remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.EventType.RendererDiscovererItemDeleted">
            <remarks>
            <para>Useless event, it will be triggered only when calling</para>
            <para>libvlc_media_discoverer_stop()</para>
            </remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.EventType.VlmMediaAdded">
            <remarks>
            <para>Useless event, it will be triggered only when calling</para>
            <para>libvlc_media_discoverer_stop()</para>
            </remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.EventType.VlmMediaRemoved">
            <remarks>
            <para>Useless event, it will be triggered only when calling</para>
            <para>libvlc_media_discoverer_stop()</para>
            </remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.EventType.VlmMediaChanged">
            <remarks>
            <para>Useless event, it will be triggered only when calling</para>
            <para>libvlc_media_discoverer_stop()</para>
            </remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.EventType.VlmMediaInstanceStarted">
            <remarks>
            <para>Useless event, it will be triggered only when calling</para>
            <para>libvlc_media_discoverer_stop()</para>
            </remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.EventType.VlmMediaInstanceStopped">
            <remarks>
            <para>Useless event, it will be triggered only when calling</para>
            <para>libvlc_media_discoverer_stop()</para>
            </remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.EventType.VlmMediaInstanceStatusInit">
            <remarks>
            <para>Useless event, it will be triggered only when calling</para>
            <para>libvlc_media_discoverer_stop()</para>
            </remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.EventType.VlmMediaInstanceStatusOpening">
            <remarks>
            <para>Useless event, it will be triggered only when calling</para>
            <para>libvlc_media_discoverer_stop()</para>
            </remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.EventType.VlmMediaInstanceStatusPlaying">
            <remarks>
            <para>Useless event, it will be triggered only when calling</para>
            <para>libvlc_media_discoverer_stop()</para>
            </remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.EventType.VlmMediaInstanceStatusPause">
            <remarks>
            <para>Useless event, it will be triggered only when calling</para>
            <para>libvlc_media_discoverer_stop()</para>
            </remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.EventType.VlmMediaInstanceStatusEnd">
            <remarks>
            <para>Useless event, it will be triggered only when calling</para>
            <para>libvlc_media_discoverer_stop()</para>
            </remarks>
        </member>
        <member name="F:VideoLAN.LibVLC.EventType.VlmMediaInstanceStatusError">
            <remarks>
            <para>Useless event, it will be triggered only when calling</para>
            <para>libvlc_media_discoverer_stop()</para>
            </remarks>
        </member>
        <member name="T:VideoLAN.LibVLC.Event">
            <summary>Renderer item</summary>
            <remarks>
            <para>This struct is passed by a</para>
            <para>or deleted.</para>
            <para>An item is valid until the</para>
            <para>is called with the same pointer.</para>
            <para>libvlc_renderer_discoverer_event_manager()</para>
            </remarks>
            <summary>A LibVLC event</summary>
        </member>
        <member name="T:VideoLAN.LibVLC.DialogQuestionType">
            <summary>
            <para>@{</para>
            <para></para>
            <para>LibVLC dialog external API</para>
            </summary>
        </member>
        <member name="T:VideoLAN.LibVLC.DialogCallback">
            <summary>Dialog callbacks to be implemented</summary>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_dialog.LibvlcDialogSetCallbacks(VideoLAN.LibVLC.Instance,VideoLAN.LibVLC.DialogCallback,System.IntPtr)">
            <summary>Register callbacks in order to handle VLC dialogs</summary>
            <param name="p_cbs">a pointer to callbacks, or NULL to unregister callbacks.</param>
            <param name="p_data">opaque pointer for the callback</param>
            <remarks>LibVLC 3.0.0 and later.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_dialog.LibvlcDialogSetContext(VideoLAN.LibVLC.DialogId,System.IntPtr)">
            <summary>Associate an opaque pointer with the dialog id</summary>
            <remarks>LibVLC 3.0.0 and later.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_dialog.LibvlcDialogGetContext(VideoLAN.LibVLC.DialogId)">
            <summary>Return the opaque pointer associated with the dialog id</summary>
            <remarks>LibVLC 3.0.0 and later.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_dialog.LibvlcDialogPostLogin(VideoLAN.LibVLC.DialogId,System.String,System.String,System.Boolean)">
            <summary>Post a login answer</summary>
            <param name="p_id">id of the dialog</param>
            <param name="psz_username">valid and non empty string</param>
            <param name="psz_password">valid string (can be empty)</param>
            <param name="b_store">if true, store the credentials</param>
            <returns>0 on success, or -1 on error</returns>
            <remarks>
            <para>After this call, p_id won't be valid anymore</para>
            <para>libvlc_dialog_cbs.pf_display_login</para>
            <para>LibVLC 3.0.0 and later.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_dialog.LibvlcDialogPostAction(VideoLAN.LibVLC.DialogId,System.Int32)">
            <summary>Post a question answer</summary>
            <param name="p_id">id of the dialog</param>
            <param name="i_action">1 for action1, 2 for action2</param>
            <returns>0 on success, or -1 on error</returns>
            <remarks>
            <para>After this call, p_id won't be valid anymore</para>
            <para>libvlc_dialog_cbs.pf_display_question</para>
            <para>LibVLC 3.0.0 and later.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_dialog.LibvlcDialogDismiss(VideoLAN.LibVLC.DialogId)">
            <summary>Dismiss a dialog</summary>
            <param name="p_id">id of the dialog</param>
            <returns>0 on success, or -1 on error</returns>
            <remarks>
            <para>After this call, p_id won't be valid anymore</para>
            <para>libvlc_dialog_cbs.pf_cancel</para>
            <para>LibVLC 3.0.0 and later.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmRelease(VideoLAN.LibVLC.Instance)">
            <summary>Release the vlm instance related to the given libvlc_instance_t</summary>
            <param name="p_instance">the instance</param>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmAddBroadcast(VideoLAN.LibVLC.Instance,System.String,System.String,System.String,System.Int32,System.SByte**,System.Int32,System.Int32)">
            <summary>Add a broadcast, with one input.</summary>
            <param name="p_instance">the instance</param>
            <param name="psz_name">the name of the new broadcast</param>
            <param name="psz_input">the input MRL</param>
            <param name="psz_output">the output MRL (the parameter to the &quot;sout&quot; variable)</param>
            <param name="i_options">number of additional options</param>
            <param name="ppsz_options">additional options</param>
            <param name="b_enabled">boolean for enabling the new broadcast</param>
            <param name="b_loop">Should this broadcast be played in loop ?</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmAddVod(VideoLAN.LibVLC.Instance,System.String,System.String,System.Int32,System.SByte**,System.Int32,System.String)">
            <summary>Add a vod, with one input.</summary>
            <param name="p_instance">the instance</param>
            <param name="psz_name">the name of the new vod media</param>
            <param name="psz_input">the input MRL</param>
            <param name="i_options">number of additional options</param>
            <param name="ppsz_options">additional options</param>
            <param name="b_enabled">boolean for enabling the new vod</param>
            <param name="psz_mux">the muxer of the vod media</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmDelMedia(VideoLAN.LibVLC.Instance,System.String)">
            <summary>Delete a media (VOD or broadcast).</summary>
            <param name="p_instance">the instance</param>
            <param name="psz_name">the media to delete</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmSetEnabled(VideoLAN.LibVLC.Instance,System.String,System.Int32)">
            <summary>Enable or disable a media (VOD or broadcast).</summary>
            <param name="p_instance">the instance</param>
            <param name="psz_name">the media to work on</param>
            <param name="b_enabled">the new status</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmSetOutput(VideoLAN.LibVLC.Instance,System.String,System.String)">
            <summary>Set the output for a media.</summary>
            <param name="p_instance">the instance</param>
            <param name="psz_name">the media to work on</param>
            <param name="psz_output">the output MRL (the parameter to the &quot;sout&quot; variable)</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmSetInput(VideoLAN.LibVLC.Instance,System.String,System.String)">
            <summary>
            <para>Set a media's input MRL. This will delete all existing inputs and</para>
            <para>add the specified one.</para>
            </summary>
            <param name="p_instance">the instance</param>
            <param name="psz_name">the media to work on</param>
            <param name="psz_input">the input MRL</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmAddInput(VideoLAN.LibVLC.Instance,System.String,System.String)">
            <summary>Add a media's input MRL. This will add the specified one.</summary>
            <param name="p_instance">the instance</param>
            <param name="psz_name">the media to work on</param>
            <param name="psz_input">the input MRL</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmSetLoop(VideoLAN.LibVLC.Instance,System.String,System.Int32)">
            <summary>Set a media's loop status.</summary>
            <param name="p_instance">the instance</param>
            <param name="psz_name">the media to work on</param>
            <param name="b_loop">the new status</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmSetMux(VideoLAN.LibVLC.Instance,System.String,System.String)">
            <summary>Set a media's vod muxer.</summary>
            <param name="p_instance">the instance</param>
            <param name="psz_name">the media to work on</param>
            <param name="psz_mux">the new muxer</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmChangeMedia(VideoLAN.LibVLC.Instance,System.String,System.String,System.String,System.Int32,System.SByte**,System.Int32,System.Int32)">
            <summary>
            <para>Edit the parameters of a media. This will delete all existing inputs and</para>
            <para>add the specified one.</para>
            </summary>
            <param name="p_instance">the instance</param>
            <param name="psz_name">the name of the new broadcast</param>
            <param name="psz_input">the input MRL</param>
            <param name="psz_output">the output MRL (the parameter to the &quot;sout&quot; variable)</param>
            <param name="i_options">number of additional options</param>
            <param name="ppsz_options">additional options</param>
            <param name="b_enabled">boolean for enabling the new broadcast</param>
            <param name="b_loop">Should this broadcast be played in loop ?</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmPlayMedia(VideoLAN.LibVLC.Instance,System.String)">
            <summary>Play the named broadcast.</summary>
            <param name="p_instance">the instance</param>
            <param name="psz_name">the name of the broadcast</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmStopMedia(VideoLAN.LibVLC.Instance,System.String)">
            <summary>Stop the named broadcast.</summary>
            <param name="p_instance">the instance</param>
            <param name="psz_name">the name of the broadcast</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmPauseMedia(VideoLAN.LibVLC.Instance,System.String)">
            <summary>Pause the named broadcast.</summary>
            <param name="p_instance">the instance</param>
            <param name="psz_name">the name of the broadcast</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmSeekMedia(VideoLAN.LibVLC.Instance,System.String,System.Single)">
            <summary>Seek in the named broadcast.</summary>
            <param name="p_instance">the instance</param>
            <param name="psz_name">the name of the broadcast</param>
            <param name="f_percentage">the percentage to seek to</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmShowMedia(VideoLAN.LibVLC.Instance,System.String)">
            <summary>
            <para>Return information about the named media as a JSON</para>
            <para>string representation.</para>
            </summary>
            <param name="p_instance">the instance</param>
            <param name="psz_name">
            <para>the name of the media,</para>
            <para>if the name is an empty string, all media is described</para>
            </param>
            <returns>string with information about named media, or NULL on error</returns>
            <remarks>
            <para>This function is mainly intended for debugging use,</para>
            <para>if you want programmatic access to the state of</para>
            <para>a vlm_media_instance_t, please use the corresponding</para>
            <para>libvlc_vlm_get_media_instance_xxx -functions.</para>
            <para>Currently there are no such functions available for</para>
            <para>vlm_media_t though.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmGetMediaInstancePosition(VideoLAN.LibVLC.Instance,System.String,System.Int32)">
            <summary>Get vlm_media instance position by name or instance id</summary>
            <param name="p_instance">a libvlc instance</param>
            <param name="psz_name">name of vlm media instance</param>
            <param name="i_instance">instance id</param>
            <returns>position as float or -1. on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmGetMediaInstanceTime(VideoLAN.LibVLC.Instance,System.String,System.Int32)">
            <summary>Get vlm_media instance time by name or instance id</summary>
            <param name="p_instance">a libvlc instance</param>
            <param name="psz_name">name of vlm media instance</param>
            <param name="i_instance">instance id</param>
            <returns>time as integer or -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmGetMediaInstanceLength(VideoLAN.LibVLC.Instance,System.String,System.Int32)">
            <summary>Get vlm_media instance length by name or instance id</summary>
            <param name="p_instance">a libvlc instance</param>
            <param name="psz_name">name of vlm media instance</param>
            <param name="i_instance">instance id</param>
            <returns>length of media item or -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmGetMediaInstanceRate(VideoLAN.LibVLC.Instance,System.String,System.Int32)">
            <summary>Get vlm_media instance playback rate by name or instance id</summary>
            <param name="p_instance">a libvlc instance</param>
            <param name="psz_name">name of vlm media instance</param>
            <param name="i_instance">instance id</param>
            <returns>playback rate or -1 on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.libvlc_vlm.LibvlcVlmGetEventManager(VideoLAN.LibVLC.Instance)">
            <summary>
            <para>Get libvlc_event_manager from a vlm media.</para>
            <para>The p_event_manager is immutable, so you don't have to hold the lock</para>
            </summary>
            <param name="p_instance">a libvlc instance</param>
            <returns>libvlc_event_manager</returns>
        </member>
        <member name="T:VideoLAN.LibVLC.LogIterator">
            <summary>This structure is opaque. It represents a libvlc log iterator</summary>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcMediaPlayerGetFps(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get movie fps rate</summary>
            <param name="p_mi">the Media Player</param>
            <returns>frames per second (fps) for this playing movie, or 0 if unspecified</returns>
            <remarks>
            <para>This function is provided for backward compatibility. It cannot deal with</para>
            <para>multiple video tracks. In LibVLC versions prior to 3.0, it would also fail</para>
            <para>if the file format did not convey the frame rate explicitly.</para>
            <para>Consider using libvlc_media_tracks_get() instead.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcMediaPlayerSetAgl(VideoLAN.LibVLC.MediaPlayer,System.UInt32)">
            <remarks>Use libvlc_media_player_set_nsobject() instead</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcMediaPlayerGetAgl(VideoLAN.LibVLC.MediaPlayer)">
            <remarks>Use libvlc_media_player_get_nsobject() instead</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcTrackDescriptionRelease(VideoLAN.LibVLC.TrackDescription)">
            <remarks>Use libvlc_track_description_list_release() instead</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcVideoGetHeight(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get current video height.</summary>
            <param name="p_mi">the media player</param>
            <returns>the video pixel height or 0 if not applicable</returns>
            <remarks>Use libvlc_video_get_size() instead.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcVideoGetWidth(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get current video width.</summary>
            <param name="p_mi">the media player</param>
            <returns>the video pixel width or 0 if not applicable</returns>
            <remarks>Use libvlc_video_get_size() instead.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcVideoGetTitleDescription(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Get the description of available titles.</summary>
            <param name="p_mi">the media player</param>
            <returns>
            <para>list containing description of available titles.</para>
            <para>It must be freed with libvlc_track_description_list_release()</para>
            </returns>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcVideoGetChapterDescription(VideoLAN.LibVLC.MediaPlayer,System.Int32)">
            <summary>Get the description of available chapters for specific title.</summary>
            <param name="p_mi">the media player</param>
            <param name="i_title">selected title</param>
            <returns>
            <para>list containing description of available chapter for title i_title.</para>
            <para>It must be freed with libvlc_track_description_list_release()</para>
            </returns>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcVideoSetSubtitleFile(VideoLAN.LibVLC.MediaPlayer,System.String)">
            <summary>Set new video subtitle file.</summary>
            <param name="p_mi">the media player</param>
            <param name="psz_subtitle">new video subtitle file</param>
            <returns>the success status (boolean)</returns>
            <remarks>Use libvlc_media_player_add_slave() instead.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcToggleTeletext(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Toggle teletext transparent status on video output.</summary>
            <param name="p_mi">the media player</param>
            <remarks>use libvlc_video_set_teletext() instead.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcAudioOutputDeviceCount(VideoLAN.LibVLC.Instance,System.String)">
            <summary>Backward compatibility stub. Do not use in new code.</summary>
            <returns>always 0.</returns>
            <remarks>Use libvlc_audio_output_device_list_get() instead.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcAudioOutputDeviceLongname(VideoLAN.LibVLC.Instance,System.String,System.Int32)">
            <summary>Backward compatibility stub. Do not use in new code.</summary>
            <returns>always NULL.</returns>
            <remarks>Use libvlc_audio_output_device_list_get() instead.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcAudioOutputDeviceId(VideoLAN.LibVLC.Instance,System.String,System.Int32)">
            <summary>Backward compatibility stub. Do not use in new code.</summary>
            <returns>always NULL.</returns>
            <remarks>Use libvlc_audio_output_device_list_get() instead.</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcAudioOutputGetDeviceType(VideoLAN.LibVLC.MediaPlayer)">
            <summary>Stub for backward compatibility.</summary>
            <returns>always -1.</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcAudioOutputSetDeviceType(VideoLAN.LibVLC.MediaPlayer,System.Int32)">
            <summary>Stub for backward compatibility.</summary>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcMediaParse(VideoLAN.LibVLC.Media)">
            <summary>Parse a media.</summary>
            <param name="p_md">media descriptor object</param>
            <remarks>
            <para>This fetches (local) art, meta data and tracks information.</para>
            <para>The method is synchronous.</para>
            <para>This function could block indefinitely.</para>
            <para>Use libvlc_media_parse_with_options() instead</para>
            <para>libvlc_media_parse_with_options</para>
            <para>libvlc_media_get_meta</para>
            <para>libvlc_media_get_tracks_info</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcMediaParseAsync(VideoLAN.LibVLC.Media)">
            <summary>Parse a media.</summary>
            <param name="p_md">media descriptor object</param>
            <remarks>
            <para>This fetches (local) art, meta data and tracks information.</para>
            <para>The method is the asynchronous of libvlc_media_parse().</para>
            <para>To track when this is over you can listen to libvlc_MediaParsedChanged</para>
            <para>event. However if the media was already parsed you will not receive this</para>
            <para>event.</para>
            <para>You can't be sure to receive the libvlc_MediaParsedChanged</para>
            <para>event (you can wait indefinitely for this event).</para>
            <para>Use libvlc_media_parse_with_options() instead</para>
            <para>libvlc_media_parse</para>
            <para>libvlc_MediaParsedChanged</para>
            <para>libvlc_media_get_meta</para>
            <para>libvlc_media_get_tracks_info</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcMediaIsParsed(VideoLAN.LibVLC.Media)">
            <summary>Return true is the media descriptor object is parsed</summary>
            <param name="p_md">media descriptor object</param>
            <returns>true if media object has been parsed otherwise it returns false</returns>
            <remarks>
            <para>This can return true in case of failure.</para>
            <para>Use libvlc_media_get_parsed_status() instead</para>
            <para>libvlc_MediaParsedChanged</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcMediaGetTracksInfo(VideoLAN.LibVLC.Media,VideoLAN.LibVLC.MediaTrackInfo)">
            <summary>Get media descriptor's elementary streams description</summary>
            <param name="p_md">media descriptor object</param>
            <param name="tracks">
            <para>address to store an allocated array of Elementary Streams</para>
            <para>descriptions (must be freed by the caller) [OUT]</para>
            </param>
            <returns>the number of Elementary Streams</returns>
            <remarks>
            <para>Note, you need to call libvlc_media_parse() or play the media at least once</para>
            <para>before calling this function.</para>
            <para>Not doing this will result in an empty array.</para>
            <para>Use libvlc_media_tracks_get() instead</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcMediaListAddFileContent(VideoLAN.LibVLC.MediaList,System.String)">
            <summary>@{</summary>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcMediaDiscovererNewFromName(VideoLAN.LibVLC.Instance,System.String)">
            <remarks>Use libvlc_media_discoverer_new() and libvlc_media_discoverer_start().</remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcMediaDiscovererLocalizedName(VideoLAN.LibVLC.MediaDiscoverer)">
            <summary>Get media service discover object its localized name.</summary>
            <param name="p_mdis">media discover object</param>
            <returns>localized name or NULL if the media_discoverer is not started</returns>
            <remarks>
            <para>Useless, use libvlc_media_discoverer_list_get() to get the</para>
            <para>longname of the service discovery.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcMediaDiscovererEventManager(VideoLAN.LibVLC.MediaDiscoverer)">
            <summary>Get event manager from media service discover object.</summary>
            <param name="p_mdis">media service discover object</param>
            <returns>event manager object.</returns>
            <remarks>
            <para>Useless, media_discoverer events are only triggered when calling</para>
            <para>libvlc_media_discoverer_start() and libvlc_media_discoverer_stop().</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcWait(VideoLAN.LibVLC.Instance)">
            <summary>
            <para>Waits until an interface causes the instance to exit.</para>
            <para>You should start at least one interface first, using libvlc_add_intf().</para>
            </summary>
            <param name="p_instance">the instance</param>
            <remarks>
            <para>This function wastes one thread doing basically nothing.</para>
            <para>libvlc_set_exit_handler() should be used instead.</para>
            </remarks>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcGetLogVerbosity(VideoLAN.LibVLC.Instance)">
            <summary>
            <para>Always returns minus one.</para>
            <para>This function is only provided for backward compatibility.</para>
            </summary>
            <param name="p_instance">ignored</param>
            <returns>always -1</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcSetLogVerbosity(VideoLAN.LibVLC.Instance,System.UInt32)">
            <summary>
            <para>This function does nothing.</para>
            <para>It is only provided for backward compatibility.</para>
            </summary>
            <param name="p_instance">ignored</param>
            <param name="level">ignored</param>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcLogOpen(VideoLAN.LibVLC.Instance)">
            <summary>
            <para>This function does nothing useful.</para>
            <para>It is only provided for backward compatibility.</para>
            </summary>
            <param name="p_instance">libvlc instance</param>
            <returns>an unique pointer or NULL on error</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcLogClose(VideoLAN.LibVLC.Log)">
            <summary>Frees memory allocated by libvlc_log_open().</summary>
            <param name="p_log">libvlc log instance or NULL</param>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcLogCount(VideoLAN.LibVLC.Log)">
            <summary>
            <para>Always returns zero.</para>
            <para>This function is only provided for backward compatibility.</para>
            </summary>
            <param name="p_log">ignored</param>
            <returns>always zero</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcLogClear(VideoLAN.LibVLC.Log)">
            <summary>
            <para>This function does nothing.</para>
            <para>It is only provided for backward compatibility.</para>
            </summary>
            <param name="p_log">ignored</param>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcLogGetIterator(VideoLAN.LibVLC.Log)">
            <summary>
            <para>This function does nothing useful.</para>
            <para>It is only provided for backward compatibility.</para>
            </summary>
            <param name="p_log">ignored</param>
            <returns>an unique pointer or NULL on error or if the parameter was NULL</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcLogIteratorFree(VideoLAN.LibVLC.LogIterator)">
            <summary>Frees memory allocated by libvlc_log_get_iterator().</summary>
            <param name="p_iter">libvlc log iterator or NULL</param>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcLogIteratorHasNext(VideoLAN.LibVLC.LogIterator)">
            <summary>
            <para>Always returns zero.</para>
            <para>This function is only provided for backward compatibility.</para>
            </summary>
            <param name="p_iter">ignored</param>
            <returns>always zero</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcLogIteratorNext(VideoLAN.LibVLC.LogIterator,VideoLAN.LibVLC.LogMessage)">
            <summary>
            <para>Always returns NULL.</para>
            <para>This function is only provided for backward compatibility.</para>
            </summary>
            <param name="p_iter">libvlc log iterator or NULL</param>
            <param name="p_buf">ignored</param>
            <returns>always NULL</returns>
        </member>
        <member name="M:VideoLAN.LibVLC.deprecated.LibvlcPlaylistPlay(VideoLAN.LibVLC.Instance,System.Int32,System.Int32,System.SByte**)">
            <summary>Start playing (if there is any item in the playlist).</summary>
            <param name="p_instance">the playlist instance</param>
            <param name="i_id">
            <para>the item to play. If this is a negative number, the next</para>
            <para>item will be selected. Otherwise, the item with the given ID will be</para>
            <para>played</para>
            </param>
            <param name="i_options">the number of options to add to the item</param>
            <param name="ppsz_options">the options to add to the item</param>
            <remarks>
            <para>Additionnal playlist item options can be specified for addition to the</para>
            <para>item before it is played.</para>
            </remarks>
        </member>
    </members>
</doc>
