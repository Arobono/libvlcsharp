// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace VideoLAN.LibVLC
{
    /// <summary>A LibVLC media list holds multiple</summary>
    /// <remarks>
    /// <para>@{</para>
    /// <para></para>
    /// <para>LibVLC media list (playlist) external API</para>
    /// </remarks>
    public unsafe partial class libvlc_media_list
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_media_list_new")]
            internal static extern global::System.IntPtr LibvlcMediaListNew(global::System.IntPtr p_instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_media_list_release")]
            internal static extern void LibvlcMediaListRelease(global::System.IntPtr p_ml);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_media_list_retain")]
            internal static extern void LibvlcMediaListRetain(global::System.IntPtr p_ml);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_media_list_set_media")]
            internal static extern void LibvlcMediaListSetMedia(global::System.IntPtr p_ml, global::System.IntPtr p_md);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_media_list_media")]
            internal static extern global::System.IntPtr LibvlcMediaListMedia(global::System.IntPtr p_ml);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_media_list_add_media")]
            internal static extern int LibvlcMediaListAddMedia(global::System.IntPtr p_ml, global::System.IntPtr p_md);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_media_list_insert_media")]
            internal static extern int LibvlcMediaListInsertMedia(global::System.IntPtr p_ml, global::System.IntPtr p_md, int i_pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_media_list_remove_index")]
            internal static extern int LibvlcMediaListRemoveIndex(global::System.IntPtr p_ml, int i_pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_media_list_count")]
            internal static extern int LibvlcMediaListCount(global::System.IntPtr p_ml);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_media_list_item_at_index")]
            internal static extern global::System.IntPtr LibvlcMediaListItemAtIndex(global::System.IntPtr p_ml, int i_pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_media_list_index_of_item")]
            internal static extern int LibvlcMediaListIndexOfItem(global::System.IntPtr p_ml, global::System.IntPtr p_md);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_media_list_is_readonly")]
            internal static extern int LibvlcMediaListIsReadonly(global::System.IntPtr p_ml);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_media_list_lock")]
            internal static extern void LibvlcMediaListLock(global::System.IntPtr p_ml);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_media_list_unlock")]
            internal static extern void LibvlcMediaListUnlock(global::System.IntPtr p_ml);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_media_list_event_manager")]
            internal static extern global::System.IntPtr LibvlcMediaListEventManager(global::System.IntPtr p_ml);
        }

        /// <summary>Create an empty media list.</summary>
        /// <param name="p_instance">libvlc instance</param>
        /// <returns>empty media list, or NULL on error</returns>
        public static global::VideoLAN.LibVLC.MediaList LibvlcMediaListNew(global::VideoLAN.LibVLC.Instance p_instance)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcMediaListNew(__arg0);
            global::VideoLAN.LibVLC.MediaList __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::VideoLAN.LibVLC.MediaList.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::VideoLAN.LibVLC.MediaList) global::VideoLAN.LibVLC.MediaList.NativeToManagedMap[__ret];
            else __result0 = global::VideoLAN.LibVLC.MediaList.__CreateInstance(__ret);
            return __result0;
        }

        /// <summary>Release media list created with libvlc_media_list_new().</summary>
        /// <param name="p_ml">a media list created with libvlc_media_list_new()</param>
        public static void LibvlcMediaListRelease(global::VideoLAN.LibVLC.MediaList p_ml)
        {
            var __arg0 = ReferenceEquals(p_ml, null) ? global::System.IntPtr.Zero : p_ml.__Instance;
            __Internal.LibvlcMediaListRelease(__arg0);
        }

        /// <summary>Retain reference to a media list</summary>
        /// <param name="p_ml">a media list created with libvlc_media_list_new()</param>
        public static void LibvlcMediaListRetain(global::VideoLAN.LibVLC.MediaList p_ml)
        {
            var __arg0 = ReferenceEquals(p_ml, null) ? global::System.IntPtr.Zero : p_ml.__Instance;
            __Internal.LibvlcMediaListRetain(__arg0);
        }

        /// <summary>
        /// <para>Associate media instance with this media list instance.</para>
        /// <para>If another media instance was present it will be released.</para>
        /// <para>The libvlc_media_list_lock should NOT be held upon entering this function.</para>
        /// </summary>
        /// <param name="p_ml">a media list instance</param>
        /// <param name="p_md">media instance to add</param>
        public static void LibvlcMediaListSetMedia(global::VideoLAN.LibVLC.MediaList p_ml, global::VideoLAN.LibVLC.Media p_md)
        {
            var __arg0 = ReferenceEquals(p_ml, null) ? global::System.IntPtr.Zero : p_ml.__Instance;
            var __arg1 = ReferenceEquals(p_md, null) ? global::System.IntPtr.Zero : p_md.__Instance;
            __Internal.LibvlcMediaListSetMedia(__arg0, __arg1);
        }

        /// <summary>
        /// <para>Get media instance from this media list instance. This action will increase</para>
        /// <para>the refcount on the media instance.</para>
        /// <para>The libvlc_media_list_lock should NOT be held upon entering this function.</para>
        /// </summary>
        /// <param name="p_ml">a media list instance</param>
        /// <returns>media instance</returns>
        public static global::VideoLAN.LibVLC.Media LibvlcMediaListMedia(global::VideoLAN.LibVLC.MediaList p_ml)
        {
            var __arg0 = ReferenceEquals(p_ml, null) ? global::System.IntPtr.Zero : p_ml.__Instance;
            var __ret = __Internal.LibvlcMediaListMedia(__arg0);
            global::VideoLAN.LibVLC.Media __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::VideoLAN.LibVLC.Media.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::VideoLAN.LibVLC.Media) global::VideoLAN.LibVLC.Media.NativeToManagedMap[__ret];
            else __result0 = global::VideoLAN.LibVLC.Media.__CreateInstance(__ret);
            return __result0;
        }

        /// <summary>
        /// <para>Add media instance to media list</para>
        /// <para>The libvlc_media_list_lock should be held upon entering this function.</para>
        /// </summary>
        /// <param name="p_ml">a media list instance</param>
        /// <param name="p_md">a media instance</param>
        /// <returns>0 on success, -1 if the media list is read-only</returns>
        public static int LibvlcMediaListAddMedia(global::VideoLAN.LibVLC.MediaList p_ml, global::VideoLAN.LibVLC.Media p_md)
        {
            var __arg0 = ReferenceEquals(p_ml, null) ? global::System.IntPtr.Zero : p_ml.__Instance;
            var __arg1 = ReferenceEquals(p_md, null) ? global::System.IntPtr.Zero : p_md.__Instance;
            var __ret = __Internal.LibvlcMediaListAddMedia(__arg0, __arg1);
            return __ret;
        }

        /// <summary>
        /// <para>Insert media instance in media list on a position</para>
        /// <para>The libvlc_media_list_lock should be held upon entering this function.</para>
        /// </summary>
        /// <param name="p_ml">a media list instance</param>
        /// <param name="p_md">a media instance</param>
        /// <param name="i_pos">position in array where to insert</param>
        /// <returns>0 on success, -1 if the media list is read-only</returns>
        public static int LibvlcMediaListInsertMedia(global::VideoLAN.LibVLC.MediaList p_ml, global::VideoLAN.LibVLC.Media p_md, int i_pos)
        {
            var __arg0 = ReferenceEquals(p_ml, null) ? global::System.IntPtr.Zero : p_ml.__Instance;
            var __arg1 = ReferenceEquals(p_md, null) ? global::System.IntPtr.Zero : p_md.__Instance;
            var __ret = __Internal.LibvlcMediaListInsertMedia(__arg0, __arg1, i_pos);
            return __ret;
        }

        /// <summary>
        /// <para>Remove media instance from media list on a position</para>
        /// <para>The libvlc_media_list_lock should be held upon entering this function.</para>
        /// </summary>
        /// <param name="p_ml">a media list instance</param>
        /// <param name="i_pos">position in array where to insert</param>
        /// <returns>0 on success, -1 if the list is read-only or the item was not found</returns>
        public static int LibvlcMediaListRemoveIndex(global::VideoLAN.LibVLC.MediaList p_ml, int i_pos)
        {
            var __arg0 = ReferenceEquals(p_ml, null) ? global::System.IntPtr.Zero : p_ml.__Instance;
            var __ret = __Internal.LibvlcMediaListRemoveIndex(__arg0, i_pos);
            return __ret;
        }

        /// <summary>
        /// <para>Get count on media list items</para>
        /// <para>The libvlc_media_list_lock should be held upon entering this function.</para>
        /// </summary>
        /// <param name="p_ml">a media list instance</param>
        /// <returns>number of items in media list</returns>
        public static int LibvlcMediaListCount(global::VideoLAN.LibVLC.MediaList p_ml)
        {
            var __arg0 = ReferenceEquals(p_ml, null) ? global::System.IntPtr.Zero : p_ml.__Instance;
            var __ret = __Internal.LibvlcMediaListCount(__arg0);
            return __ret;
        }

        /// <summary>
        /// <para>List media instance in media list at a position</para>
        /// <para>The libvlc_media_list_lock should be held upon entering this function.</para>
        /// </summary>
        /// <param name="p_ml">a media list instance</param>
        /// <param name="i_pos">position in array where to insert</param>
        /// <returns>
        /// <para>media instance at position i_pos, or NULL if not found.</para>
        /// <para>In case of success, libvlc_media_retain() is called to increase the refcount</para>
        /// <para>on the media.</para>
        /// </returns>
        public static global::VideoLAN.LibVLC.Media LibvlcMediaListItemAtIndex(global::VideoLAN.LibVLC.MediaList p_ml, int i_pos)
        {
            var __arg0 = ReferenceEquals(p_ml, null) ? global::System.IntPtr.Zero : p_ml.__Instance;
            var __ret = __Internal.LibvlcMediaListItemAtIndex(__arg0, i_pos);
            global::VideoLAN.LibVLC.Media __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::VideoLAN.LibVLC.Media.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::VideoLAN.LibVLC.Media) global::VideoLAN.LibVLC.Media.NativeToManagedMap[__ret];
            else __result0 = global::VideoLAN.LibVLC.Media.__CreateInstance(__ret);
            return __result0;
        }

        /// <summary>
        /// <para>Find index position of List media instance in media list.</para>
        /// <para>Warning: the function will return the first matched position.</para>
        /// <para>The libvlc_media_list_lock should be held upon entering this function.</para>
        /// </summary>
        /// <param name="p_ml">a media list instance</param>
        /// <param name="p_md">media instance</param>
        /// <returns>position of media instance or -1 if media not found</returns>
        public static int LibvlcMediaListIndexOfItem(global::VideoLAN.LibVLC.MediaList p_ml, global::VideoLAN.LibVLC.Media p_md)
        {
            var __arg0 = ReferenceEquals(p_ml, null) ? global::System.IntPtr.Zero : p_ml.__Instance;
            var __arg1 = ReferenceEquals(p_md, null) ? global::System.IntPtr.Zero : p_md.__Instance;
            var __ret = __Internal.LibvlcMediaListIndexOfItem(__arg0, __arg1);
            return __ret;
        }

        /// <summary>This indicates if this media list is read-only from a user point of view</summary>
        /// <param name="p_ml">media list instance</param>
        /// <returns>1 on readonly, 0 on readwrite</returns>
        public static int LibvlcMediaListIsReadonly(global::VideoLAN.LibVLC.MediaList p_ml)
        {
            var __arg0 = ReferenceEquals(p_ml, null) ? global::System.IntPtr.Zero : p_ml.__Instance;
            var __ret = __Internal.LibvlcMediaListIsReadonly(__arg0);
            return __ret;
        }

        /// <summary>Get lock on media list items</summary>
        /// <param name="p_ml">a media list instance</param>
        public static void LibvlcMediaListLock(global::VideoLAN.LibVLC.MediaList p_ml)
        {
            var __arg0 = ReferenceEquals(p_ml, null) ? global::System.IntPtr.Zero : p_ml.__Instance;
            __Internal.LibvlcMediaListLock(__arg0);
        }

        /// <summary>
        /// <para>Release lock on media list items</para>
        /// <para>The libvlc_media_list_lock should be held upon entering this function.</para>
        /// </summary>
        /// <param name="p_ml">a media list instance</param>
        public static void LibvlcMediaListUnlock(global::VideoLAN.LibVLC.MediaList p_ml)
        {
            var __arg0 = ReferenceEquals(p_ml, null) ? global::System.IntPtr.Zero : p_ml.__Instance;
            __Internal.LibvlcMediaListUnlock(__arg0);
        }

        /// <summary>
        /// <para>Get libvlc_event_manager from this media list instance.</para>
        /// <para>The p_event_manager is immutable, so you don't have to hold the lock</para>
        /// </summary>
        /// <param name="p_ml">a media list instance</param>
        /// <returns>libvlc_event_manager</returns>
        public static global::VideoLAN.LibVLC.EventManager LibvlcMediaListEventManager(global::VideoLAN.LibVLC.MediaList p_ml)
        {
            var __arg0 = ReferenceEquals(p_ml, null) ? global::System.IntPtr.Zero : p_ml.__Instance;
            var __ret = __Internal.LibvlcMediaListEventManager(__arg0);
            global::VideoLAN.LibVLC.EventManager __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::VideoLAN.LibVLC.EventManager.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::VideoLAN.LibVLC.EventManager) global::VideoLAN.LibVLC.EventManager.NativeToManagedMap[__ret];
            else __result0 = global::VideoLAN.LibVLC.EventManager.__CreateInstance(__ret);
            return __result0;
        }
    }
}
