// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace VideoLAN.LibVLC
{
    public unsafe partial class libvlc_vlm
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_release")]
            internal static extern void LibvlcVlmRelease(global::System.IntPtr p_instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_add_broadcast")]
            internal static extern int LibvlcVlmAddBroadcast(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name, [MarshalAs(UnmanagedType.LPStr)] string psz_input, [MarshalAs(UnmanagedType.LPStr)] string psz_output, int i_options, sbyte** ppsz_options, int b_enabled, int b_loop);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_add_vod")]
            internal static extern int LibvlcVlmAddVod(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name, [MarshalAs(UnmanagedType.LPStr)] string psz_input, int i_options, sbyte** ppsz_options, int b_enabled, [MarshalAs(UnmanagedType.LPStr)] string psz_mux);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_del_media")]
            internal static extern int LibvlcVlmDelMedia(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_set_enabled")]
            internal static extern int LibvlcVlmSetEnabled(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name, int b_enabled);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_set_output")]
            internal static extern int LibvlcVlmSetOutput(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name, [MarshalAs(UnmanagedType.LPStr)] string psz_output);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_set_input")]
            internal static extern int LibvlcVlmSetInput(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name, [MarshalAs(UnmanagedType.LPStr)] string psz_input);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_add_input")]
            internal static extern int LibvlcVlmAddInput(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name, [MarshalAs(UnmanagedType.LPStr)] string psz_input);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_set_loop")]
            internal static extern int LibvlcVlmSetLoop(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name, int b_loop);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_set_mux")]
            internal static extern int LibvlcVlmSetMux(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name, [MarshalAs(UnmanagedType.LPStr)] string psz_mux);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_change_media")]
            internal static extern int LibvlcVlmChangeMedia(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name, [MarshalAs(UnmanagedType.LPStr)] string psz_input, [MarshalAs(UnmanagedType.LPStr)] string psz_output, int i_options, sbyte** ppsz_options, int b_enabled, int b_loop);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_play_media")]
            internal static extern int LibvlcVlmPlayMedia(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_stop_media")]
            internal static extern int LibvlcVlmStopMedia(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_pause_media")]
            internal static extern int LibvlcVlmPauseMedia(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_seek_media")]
            internal static extern int LibvlcVlmSeekMedia(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name, float f_percentage);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_show_media")]
            internal static extern global::System.IntPtr LibvlcVlmShowMedia(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_get_media_instance_position")]
            internal static extern float LibvlcVlmGetMediaInstancePosition(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name, int i_instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_get_media_instance_time")]
            internal static extern int LibvlcVlmGetMediaInstanceTime(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name, int i_instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_get_media_instance_length")]
            internal static extern int LibvlcVlmGetMediaInstanceLength(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name, int i_instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_get_media_instance_rate")]
            internal static extern int LibvlcVlmGetMediaInstanceRate(global::System.IntPtr p_instance, [MarshalAs(UnmanagedType.LPStr)] string psz_name, int i_instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libvlc", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="libvlc_vlm_get_event_manager")]
            internal static extern global::System.IntPtr LibvlcVlmGetEventManager(global::System.IntPtr p_instance);
        }

        /// <summary>Release the vlm instance related to the given libvlc_instance_t</summary>
        /// <param name="p_instance">the instance</param>
        public static void LibvlcVlmRelease(global::VideoLAN.LibVLC.Instance p_instance)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            __Internal.LibvlcVlmRelease(__arg0);
        }

        /// <summary>Add a broadcast, with one input.</summary>
        /// <param name="p_instance">the instance</param>
        /// <param name="psz_name">the name of the new broadcast</param>
        /// <param name="psz_input">the input MRL</param>
        /// <param name="psz_output">the output MRL (the parameter to the &quot;sout&quot; variable)</param>
        /// <param name="i_options">number of additional options</param>
        /// <param name="ppsz_options">additional options</param>
        /// <param name="b_enabled">boolean for enabling the new broadcast</param>
        /// <param name="b_loop">Should this broadcast be played in loop ?</param>
        /// <returns>0 on success, -1 on error</returns>
        public static int LibvlcVlmAddBroadcast(global::VideoLAN.LibVLC.Instance p_instance, string psz_name, string psz_input, string psz_output, int i_options, sbyte** ppsz_options, int b_enabled, int b_loop)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmAddBroadcast(__arg0, psz_name, psz_input, psz_output, i_options, ppsz_options, b_enabled, b_loop);
            return __ret;
        }

        /// <summary>Add a vod, with one input.</summary>
        /// <param name="p_instance">the instance</param>
        /// <param name="psz_name">the name of the new vod media</param>
        /// <param name="psz_input">the input MRL</param>
        /// <param name="i_options">number of additional options</param>
        /// <param name="ppsz_options">additional options</param>
        /// <param name="b_enabled">boolean for enabling the new vod</param>
        /// <param name="psz_mux">the muxer of the vod media</param>
        /// <returns>0 on success, -1 on error</returns>
        public static int LibvlcVlmAddVod(global::VideoLAN.LibVLC.Instance p_instance, string psz_name, string psz_input, int i_options, sbyte** ppsz_options, int b_enabled, string psz_mux)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmAddVod(__arg0, psz_name, psz_input, i_options, ppsz_options, b_enabled, psz_mux);
            return __ret;
        }

        /// <summary>Delete a media (VOD or broadcast).</summary>
        /// <param name="p_instance">the instance</param>
        /// <param name="psz_name">the media to delete</param>
        /// <returns>0 on success, -1 on error</returns>
        public static int LibvlcVlmDelMedia(global::VideoLAN.LibVLC.Instance p_instance, string psz_name)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmDelMedia(__arg0, psz_name);
            return __ret;
        }

        /// <summary>Enable or disable a media (VOD or broadcast).</summary>
        /// <param name="p_instance">the instance</param>
        /// <param name="psz_name">the media to work on</param>
        /// <param name="b_enabled">the new status</param>
        /// <returns>0 on success, -1 on error</returns>
        public static int LibvlcVlmSetEnabled(global::VideoLAN.LibVLC.Instance p_instance, string psz_name, int b_enabled)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmSetEnabled(__arg0, psz_name, b_enabled);
            return __ret;
        }

        /// <summary>Set the output for a media.</summary>
        /// <param name="p_instance">the instance</param>
        /// <param name="psz_name">the media to work on</param>
        /// <param name="psz_output">the output MRL (the parameter to the &quot;sout&quot; variable)</param>
        /// <returns>0 on success, -1 on error</returns>
        public static int LibvlcVlmSetOutput(global::VideoLAN.LibVLC.Instance p_instance, string psz_name, string psz_output)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmSetOutput(__arg0, psz_name, psz_output);
            return __ret;
        }

        /// <summary>
        /// <para>Set a media's input MRL. This will delete all existing inputs and</para>
        /// <para>add the specified one.</para>
        /// </summary>
        /// <param name="p_instance">the instance</param>
        /// <param name="psz_name">the media to work on</param>
        /// <param name="psz_input">the input MRL</param>
        /// <returns>0 on success, -1 on error</returns>
        public static int LibvlcVlmSetInput(global::VideoLAN.LibVLC.Instance p_instance, string psz_name, string psz_input)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmSetInput(__arg0, psz_name, psz_input);
            return __ret;
        }

        /// <summary>Add a media's input MRL. This will add the specified one.</summary>
        /// <param name="p_instance">the instance</param>
        /// <param name="psz_name">the media to work on</param>
        /// <param name="psz_input">the input MRL</param>
        /// <returns>0 on success, -1 on error</returns>
        public static int LibvlcVlmAddInput(global::VideoLAN.LibVLC.Instance p_instance, string psz_name, string psz_input)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmAddInput(__arg0, psz_name, psz_input);
            return __ret;
        }

        /// <summary>Set a media's loop status.</summary>
        /// <param name="p_instance">the instance</param>
        /// <param name="psz_name">the media to work on</param>
        /// <param name="b_loop">the new status</param>
        /// <returns>0 on success, -1 on error</returns>
        public static int LibvlcVlmSetLoop(global::VideoLAN.LibVLC.Instance p_instance, string psz_name, int b_loop)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmSetLoop(__arg0, psz_name, b_loop);
            return __ret;
        }

        /// <summary>Set a media's vod muxer.</summary>
        /// <param name="p_instance">the instance</param>
        /// <param name="psz_name">the media to work on</param>
        /// <param name="psz_mux">the new muxer</param>
        /// <returns>0 on success, -1 on error</returns>
        public static int LibvlcVlmSetMux(global::VideoLAN.LibVLC.Instance p_instance, string psz_name, string psz_mux)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmSetMux(__arg0, psz_name, psz_mux);
            return __ret;
        }

        /// <summary>
        /// <para>Edit the parameters of a media. This will delete all existing inputs and</para>
        /// <para>add the specified one.</para>
        /// </summary>
        /// <param name="p_instance">the instance</param>
        /// <param name="psz_name">the name of the new broadcast</param>
        /// <param name="psz_input">the input MRL</param>
        /// <param name="psz_output">the output MRL (the parameter to the &quot;sout&quot; variable)</param>
        /// <param name="i_options">number of additional options</param>
        /// <param name="ppsz_options">additional options</param>
        /// <param name="b_enabled">boolean for enabling the new broadcast</param>
        /// <param name="b_loop">Should this broadcast be played in loop ?</param>
        /// <returns>0 on success, -1 on error</returns>
        public static int LibvlcVlmChangeMedia(global::VideoLAN.LibVLC.Instance p_instance, string psz_name, string psz_input, string psz_output, int i_options, sbyte** ppsz_options, int b_enabled, int b_loop)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmChangeMedia(__arg0, psz_name, psz_input, psz_output, i_options, ppsz_options, b_enabled, b_loop);
            return __ret;
        }

        /// <summary>Play the named broadcast.</summary>
        /// <param name="p_instance">the instance</param>
        /// <param name="psz_name">the name of the broadcast</param>
        /// <returns>0 on success, -1 on error</returns>
        public static int LibvlcVlmPlayMedia(global::VideoLAN.LibVLC.Instance p_instance, string psz_name)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmPlayMedia(__arg0, psz_name);
            return __ret;
        }

        /// <summary>Stop the named broadcast.</summary>
        /// <param name="p_instance">the instance</param>
        /// <param name="psz_name">the name of the broadcast</param>
        /// <returns>0 on success, -1 on error</returns>
        public static int LibvlcVlmStopMedia(global::VideoLAN.LibVLC.Instance p_instance, string psz_name)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmStopMedia(__arg0, psz_name);
            return __ret;
        }

        /// <summary>Pause the named broadcast.</summary>
        /// <param name="p_instance">the instance</param>
        /// <param name="psz_name">the name of the broadcast</param>
        /// <returns>0 on success, -1 on error</returns>
        public static int LibvlcVlmPauseMedia(global::VideoLAN.LibVLC.Instance p_instance, string psz_name)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmPauseMedia(__arg0, psz_name);
            return __ret;
        }

        /// <summary>Seek in the named broadcast.</summary>
        /// <param name="p_instance">the instance</param>
        /// <param name="psz_name">the name of the broadcast</param>
        /// <param name="f_percentage">the percentage to seek to</param>
        /// <returns>0 on success, -1 on error</returns>
        public static int LibvlcVlmSeekMedia(global::VideoLAN.LibVLC.Instance p_instance, string psz_name, float f_percentage)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmSeekMedia(__arg0, psz_name, f_percentage);
            return __ret;
        }

        /// <summary>
        /// <para>Return information about the named media as a JSON</para>
        /// <para>string representation.</para>
        /// </summary>
        /// <param name="p_instance">the instance</param>
        /// <param name="psz_name">
        /// <para>the name of the media,</para>
        /// <para>if the name is an empty string, all media is described</para>
        /// </param>
        /// <returns>string with information about named media, or NULL on error</returns>
        /// <remarks>
        /// <para>This function is mainly intended for debugging use,</para>
        /// <para>if you want programmatic access to the state of</para>
        /// <para>a vlm_media_instance_t, please use the corresponding</para>
        /// <para>libvlc_vlm_get_media_instance_xxx -functions.</para>
        /// <para>Currently there are no such functions available for</para>
        /// <para>vlm_media_t though.</para>
        /// </remarks>
        public static string LibvlcVlmShowMedia(global::VideoLAN.LibVLC.Instance p_instance, string psz_name)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmShowMedia(__arg0, psz_name);
            return Marshal.PtrToStringAnsi(__ret);
        }

        /// <summary>Get vlm_media instance position by name or instance id</summary>
        /// <param name="p_instance">a libvlc instance</param>
        /// <param name="psz_name">name of vlm media instance</param>
        /// <param name="i_instance">instance id</param>
        /// <returns>position as float or -1. on error</returns>
        public static float LibvlcVlmGetMediaInstancePosition(global::VideoLAN.LibVLC.Instance p_instance, string psz_name, int i_instance)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmGetMediaInstancePosition(__arg0, psz_name, i_instance);
            return __ret;
        }

        /// <summary>Get vlm_media instance time by name or instance id</summary>
        /// <param name="p_instance">a libvlc instance</param>
        /// <param name="psz_name">name of vlm media instance</param>
        /// <param name="i_instance">instance id</param>
        /// <returns>time as integer or -1 on error</returns>
        public static int LibvlcVlmGetMediaInstanceTime(global::VideoLAN.LibVLC.Instance p_instance, string psz_name, int i_instance)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmGetMediaInstanceTime(__arg0, psz_name, i_instance);
            return __ret;
        }

        /// <summary>Get vlm_media instance length by name or instance id</summary>
        /// <param name="p_instance">a libvlc instance</param>
        /// <param name="psz_name">name of vlm media instance</param>
        /// <param name="i_instance">instance id</param>
        /// <returns>length of media item or -1 on error</returns>
        public static int LibvlcVlmGetMediaInstanceLength(global::VideoLAN.LibVLC.Instance p_instance, string psz_name, int i_instance)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmGetMediaInstanceLength(__arg0, psz_name, i_instance);
            return __ret;
        }

        /// <summary>Get vlm_media instance playback rate by name or instance id</summary>
        /// <param name="p_instance">a libvlc instance</param>
        /// <param name="psz_name">name of vlm media instance</param>
        /// <param name="i_instance">instance id</param>
        /// <returns>playback rate or -1 on error</returns>
        public static int LibvlcVlmGetMediaInstanceRate(global::VideoLAN.LibVLC.Instance p_instance, string psz_name, int i_instance)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmGetMediaInstanceRate(__arg0, psz_name, i_instance);
            return __ret;
        }

        /// <summary>
        /// <para>Get libvlc_event_manager from a vlm media.</para>
        /// <para>The p_event_manager is immutable, so you don't have to hold the lock</para>
        /// </summary>
        /// <param name="p_instance">a libvlc instance</param>
        /// <returns>libvlc_event_manager</returns>
        public static global::VideoLAN.LibVLC.EventManager LibvlcVlmGetEventManager(global::VideoLAN.LibVLC.Instance p_instance)
        {
            var __arg0 = ReferenceEquals(p_instance, null) ? global::System.IntPtr.Zero : p_instance.__Instance;
            var __ret = __Internal.LibvlcVlmGetEventManager(__arg0);
            global::VideoLAN.LibVLC.EventManager __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::VideoLAN.LibVLC.EventManager.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::VideoLAN.LibVLC.EventManager) global::VideoLAN.LibVLC.EventManager.NativeToManagedMap[__ret];
            else __result0 = global::VideoLAN.LibVLC.EventManager.__CreateInstance(__ret);
            return __result0;
        }
    }
}
